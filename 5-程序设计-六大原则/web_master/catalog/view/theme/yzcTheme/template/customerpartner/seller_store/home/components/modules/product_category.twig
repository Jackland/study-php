{% trans_default_category 'catalog/view/customerpartner/seller_store/home/index' %}
{# @file 产品分类 #}

{{ css([
  'static/customerpartner/seller_store/home/components/modules/product_category.css'
]) }}

<script type="text/x-template" id="product-category-module">
  <div class="product-category-container">
    {# 首次进入显示骨架图 #}
    <div v-if="isInit"> 
      <div class="category-module">
        <img class="w1200" src="{{ asset('static/customerpartner/seller_store/home/images/blanks/product-category.png') }}">
      </div>
    </div>
    {# 编辑后内容显示模块 #}
    <div v-else>
      <div class="category-module m20-b">
        <div class="common-title">Main Categories</div>
        <div class="w1200 m20-t">
          <div class="store-tabs">
              <div v-for="(tab, tIndex) in categoryData" class="one-tab" :class="{'active':tIndex == 0}">${tab.type_name}</div>
          </div>
          <div v-for="(item,ctIndex) in categoryData">
            <div v-if="ctIndex==0" class="module-flex">
              <div v-for="(one,i) in item.products" class="category-item">
                <div class="category-img scale-range" :class="{'unaval160-image': !one.available||one.notApplicable, 'not-applicable': one.notApplicable}">
                  <a href="{{ url('product/product',{'product_id': one.id}) }}" target="_blank">
                    <img class="scale" :src="one.image">
                  </a>
                </div>
                <div class="category-content">
                  <div class="text-small break-all pos-top-img">Item Code:&nbsp;${one.sku}<span v-html="one.tags"></span></div>
                  <div class="p3-t">
                    <span class="module-largef text-bold">${one.price}</span>
                    <span class="module-grey p2-l">/Unit</span>
                  </div>
                  <div class="text-small">Qty Available:&nbsp;${one.qty}</div>
                  <div class="cart">
                    <i class="giga icon-gouwuche-fuben"></i>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="show-more">MORE<i class="giga icon-V10_youjiantougengduo"></i></div>
        </div>
      </div>
    </div>

    {# 编辑弹窗部分 #}
    <div>
      <el-dialog class="category-modal module-modal ele ele-modal" :class="{'active-modal': showEdit}" title="{{__('产品分类设置')}}" :visible="showEdit" :close-on-click-modal="false"
        @close="closeEdit" append-to-body destory-on-close width="800px">
        <div class="content-container">
          <div class="module-modal-tip">
            <ul>
              <li>
                {{__('本模块适用于批量产品分类展示，可选择”自动推荐“和“手工添加”产品。')}}
              </li>
              <li>
                {{__('自动推荐会根据选择的排序方式展示产品，手工添加根据所选产品展示。')}}
              </li>
              <li>
                {{__('最多可选择:num1个分类，每个分类最多可选择:num2个产品。', {num1:"<strong>6</strong>", num2:"<strong>12</strong>"})}}
              </li>
            </ul>
          </div>
          <div class="module-edit-container">
            <el-tabs v-model="activeTab" class="ele ele-tabs">
              <el-tab-pane label="{{__('内容设置')}}" name="tab1">
                <div class="module-form-body category-edit-body scrollable-container">
                  <el-form label-width="145px">
                    <el-form-item label="{{__('推荐方式')}}" class="radio-form-item recommend-method-form">
                      <el-radio-group v-model="type" class="ele ele-radio-group">
                        <el-radio v-for="(v,k) in options.module_product_type_mode" :label="k">${v}</el-radio>
                      </el-radio-group>
                    </el-form-item>
                  </el-form>

                  {# 自动推荐部分表单内容 #}
                  <div class="category-auto-container" v-show="type=='auto'">
                    <el-form label-width="156px" ref="autoform" :model="model" :rules="rules" class="ele ele-form">
                      <el-form-item label="{{__('产品分类')}}" prop="categories" class="auto-category-form radio-form-item lform">
                        <category-select-input @change="updateCategory" :limit="6" :default="model.categories"></category-select-input>
                        <el-tooltip class="item" effect="dark" placement="top" hide-after="0">
                          <i class="giga icon-V10-wenhaotishi"></i>
                          <div slot="content" class="ele ele-tooltip-content">
                            {{__('最多选择:num项，以选择先后顺序展示', {num: 6})}}
                          </div>
                        </el-tooltip>
                      </el-form-item>
                      <el-form-item label="{{__('自动推荐排序')}}" prop="sort_type" class="auto-sort-form radio-form-item">
                        <el-select v-model="model.sort_type" class="auto-sort-select">
                          <el-option v-for="(v,k) in options.module_product_type_auto_sort" :label="v" :value="k"></el-option>
                        </el-select>
                        <div class="sort-tip">
                          {{__('近30天内数据')}}
                        </div>
                      </el-form-item>
                      <el-form-item label="{{__('显示数量')}}" prop="each_count" class="radio-form-item mform">
                        <el-select v-model="model.each_count">
                          <el-option label="{{__(':num个产品', {num: 4})}}" :value="4"></el-option>
                          <el-option label="{{__(':num个产品', {num: 8})}}" :value="8"></el-option>
                          <el-option label="{{__(':num个产品', {num: 12})}}" :value="12"></el-option>
                        </el-select>
                      </el-form-item>
                    </el-form>
                  </div>

                  {# 手动添加部分表单内容 #}
                  <div class="category-manual-container" v-show="type=='manual'">
                    <div class="category-table-header">
                      <div class="category-col">{{__('产品分类')}}</div>
                      <div class="button-col">{{__('展示的产品')}}</div>
                      <div class="action-col">{{__('操作')}}</div>
                    </div>
                    <div class="category-table-body">
                      <div class="category-table-item" v-for="(item, index) of tableData">
                        <div class="category-table-row">
                          <div class="category-col ele ele-form">
                            <category-select-input class="sinput" ref="singleCatePick"
                              @change="updateManualCategory($event,index)" type="single" 
                              :single_default="item.default">
                            </category-select-input>
                          </div>
                          <div class="button-col ele ele-btn">
                            <el-button class="outline add-button" @click="addProduct(index)" 
                              :disabled="item.category_id == null || item.products.length >= 12">
                              {{__('添加产品')}}
                            </el-button>
                            <div v-if="item.category_id != null" class="add-products-tip">
                              {{__("已添加:num1个,还可添加:num2个产品。", {num1: "<strong>${item.products.length}</strong>", num2:"<strong>${12 - item.products.length}</strong>"})}}
                            </div>
                          </div>
                          <div class="action-col action-btn-col">
                            <div class="action-btn-group">
                              <i class="el-arrow-icon el-icon-arrow-up ele ele-action-icon" 
                                v-if="item.products.length > 0 && item.show" @click="toggleList(item)"></i>
                              <i class="el-arrow-icon el-icon-arrow-down ele ele-action-icon" 
                                v-if="item.products.length > 0 && !item.show" @click="toggleList(item)"></i>
                              <i class="el-arrow-icon el-icon-arrow-down ele ele-action-icon" :style="{visibility: 'hidden'}"
                                v-if="item.products.length <= 0"></i>
                              <i class="giga icon-xiangshangjiantou-01 ele ele-action-icon" :class="{'is-disabled': index <= 0}" 
                                @click="upCategory(index)"></i>
                              <i class="giga icon-xiangxiajiantou-01 ele ele-action-icon" :class="{'is-disabled': index >= tableData.length - 1}" 
                                @click="downCategory(index)"></i>
                              <i class="giga icon-co_lajitong ele ele-action-icon" :class="{'is-disabled': tableData.length <= 1}" 
                                @click="delCategory(index)"></i>
                            </div>
                          </div>
                        
                        </div>
                        <div class="products-container" v-show="item.show">
                          <div v-for="(product, productIndex) in item.products" class="product-item-container" :key="index">
                            <div class="content">
                              <div class="product-img-container">
                                <img class="product-img" :src="product.image">
                              </div>
                              <div class="product-info">
                                <div class="product-info__title" :title="product.name">${product.name}</div>
                                <div class="product-info__code">${product.sku} / ${product.mpn}<span v-html="product.tags"></span></div>
                                <div class="product-info__footer">
                                  <span class="product-info__footer-price"><span v-html="product.price"></span></span>
                                  <span class="product-info__footer-qty">Qty Available: ${product.qty}</span>
                                </div>
                              </div>
                              <div class="product-oper">
                                <i class="giga icon-xiangshangjiantou-01 ele ele-action-icon" :class="{'is-disabled': productIndex <= 0}"
                                  @click="upProduct(index, productIndex)" ></i>
                                <i class="giga icon-xiangxiajiantou-01 ele ele-action-icon"
                                  :class="{'is-disabled': productIndex >= item.products.length - 1}" @click="downProduct(index, productIndex)"></i>
                                <i class="giga icon-co_lajitong ele ele-action-icon" @click="delProduct(index, productIndex)"></i>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                    <div class="category-table-footer ele ele-btn">
                      <div class="category-add-tip">{{__("还可添加:num个分类", {num:" <span class=\"strong-tip\">${ 6 - tableData.length }</span> "})}}</div>
                      <el-button class="outline add-product-btn" @click="handleAddCategory"
                        :disabled="tableData.length >= 6"><i class="giga icon-iconfonticon02-copy btn-icon"></i>{{__('添加')}}</el-button>
                    </div>
                  </div>
                </div>
              </el-tab-pane>
            </el-tabs>
          </div>
        </div>
        <template slot="footer">
          <div class="ele ele-btn ele-btn-group">
            <el-button class="oper-btn" @click="closeEdit">{{__('取消')}}</el-button>
            <el-button class="oper-btn" type="primary" @click="saveEdit" :loading="btnLoading">{{__('保存')}}</el-button>
          </div>
        </template>
      </el-dialog>
      {# 产品选择弹窗 #}
      <product-select-dialog v-if="curCategory && curCategory.category_id != null" :showModal="showProductDialog" :type="searchType" 
        :category_id="curCategory.category_id" @close="handleCloseProductDialog" @choose="chooseProduct" 
        :beforeChoose="beforeChooseProduct"></product-select-dialog>
    </div> 
  </div>
</script>
<script>
const PRODUCT_CATEGORY_TRANSLATE = {
  EMPTY_CATEGORY: "{{__('分类不可为空')}}",
  EMPTY_PRODUCT: "{{__('请选择产品')}}",
  EXIST_PRODUCT: "{{__('您已选择该产品！')}}",
}
</script>
<script>
  Vue.component('category', {
    template: '#product-category-module',
    delimiters: ['${', '}'],
    props: {
      data: {
        type: Object,
        default: () => ({})
      }
    },
    data: () => {
      return {
        showEdit: false,
        activeTab: 'tab1',
        loading: false, // 加载动画
        btnLoading: false,
        axios: null,

        type: 'auto', // 推荐方式
        //自动添加表单内容
        model: {
          categories: [],
          each_count: 8,
          sort_type: '',
        },
        rules: {
          categories: {message:PRODUCT_CATEGORY_TRANSLATE.EMPTY_CATEGORY, required: true, trigger: 'blur'},
        },

        //手动添加表单内容
        tableData: [{
          show: false, //是否展开
          category_id: null,
          products: []
        }], 
        showProductDialog: false,
        searchType: MODULE_TYPE.PRODUCT_TYPE,
        curCategory: null,
        categoryData: [], // 实际展示的数据
      }
    },
    created() {
      this.axios = axios.create({});
    },
    watch: {
      showEdit: {
        immediate: true,
        handler: function(res) {
          this.$nextTick(function() {
            this.initDefault(this.data)
            let height = $(".active-modal.module-modal .el-dialog__body").height() - $(".active-modal .module-modal-tip").height();
            $(".active-modal .module-edit-container").height(height);
          })
        }
      },
    },
    computed: {
      isInit() {
        return jQuery.isEmptyObject(this.data)
      },
      options() {
        return store.state.options;
      }
    },
    methods: {
      /**
      * 编辑时初始化默认值
      */
      initDefault(data) {
        let that = this;
        if(!jQuery.isEmptyObject(data)) {
          this.type = data.mode;
          if(data.mode == 'auto') {
            this.model.sort_type = data.mode_auto.sort_type;
            this.model.each_count = data.mode_auto.each_count;
            this.model.categories = data.mode_auto.product_types.map(item => {
              return {
                value: item.type_id,
                label: item.type_name
              }
            })
          } else {
            this.model.sort_type = Object.keys(this.options.module_product_type_auto_sort || {})[0];
            this.tableData = _.cloneDeep(data.mode_manual.product_types.map(item => {
              return {
                show: item.products.length > 0,
                category_id: item.type_id,
                products: item.products,
                default: {
                  label:item.type_name, 
                  value:item.type_id
                }
              }
            }))
          }
        } else {
          this.model.sort_type = Object.keys(this.options.module_product_type_auto_sort || {})[0];
        }
        // 重组categoriesDataShow展示数据
        if( that.data && that.data.mode_auto){
          that.categoryData = _.cloneDeep(that.data.mode_auto.product_types);
        } else if (that.data && that.data.mode_manual) {
          that.categoryData = _.cloneDeep(that.data.mode_manual.product_types);
        }
        that.categoryData = that.categoryData.filter(item => item.products.length > 0)
      },

      /**
      * 编辑操作
      */
      handleEdit() {
        this.showEdit = true;
      },

      closeEdit() {
        this.clearModal();
        this.showEdit = false;
      },

      //清空弹窗
      clearModal() {
        this.$refs['autoform'].resetFields();
        this.tableData = [{
          show: false, //是否展开
          category_id: null,
          products: []
        }]
        this.model = {
          categories: [],
          each_count: 8,
          sort_type: '',
        },
        this.curCategory = null;
        if(this.$refs.singleCatePick) {
          for(let ref of this.$refs.singleCatePick) {
            ref.clearSingleInput();
          }
        }
        this.type = 'auto';
      },

      validateManual(data){
        let that = this;
        for(cate of data.data.mode_manual.product_types) {
          if (cate.type_id == null) {
            that.$message({...ALERT_OPTION, message: PRODUCT_CATEGORY_TRANSLATE.EMPTY_CATEGORY});
            return false;
          } else if (cate.products.length <= 0) {
            that.$message({...ALERT_OPTION, message: PRODUCT_CATEGORY_TRANSLATE.EMPTY_PRODUCT});
            return false;
          }
        }
        return true;
      },

      //统一请求接口
      _request(data) {
        let that = this;
        that.btnLoading = true;
        that.axios.post(API.MODULE_SAVE, data).then(res => {
          if(res.data.code == 200) {
            that.closeEdit();
            that.$emit("set-module", _.cloneDeep(res.data.data));
          } else {
            that.$message({...ALERT_OPTION, message: res.data.msg});
          }
          that.btnLoading = false;
        }).catch(err => {
          that.$message.error(err);
          that.btnLoading = false;
        })
      },

      //保存弹窗按钮
      saveEdit() {
        //自动推荐
        if(this.type == 'auto') {
          let data = {
            type: MODULE_TYPE.PRODUCT_TYPE,
            data: {
              mode: this.type,
              mode_auto: {
                product_types: _.map(this.model.categories, item => { return {"type_id": item.value} }),
                sort_type: this.model.sort_type,
                each_count: this.model.each_count,
              }
            }
          }

          this.$refs['autoform'].validate((valid) => {
            if(valid) {
              this._request(data);
            }
          })
        } else {
          let data = {
            type: MODULE_TYPE.PRODUCT_TYPE,
            data: {
              mode: this.type,
              mode_manual: {
                product_types: [] 
              }
            }
          }

          for(let item of this.tableData) {
            let itemData = {
              products: []
            }
            itemData['type_id'] = item.category_id;
            itemData.products = item.products;
            data.data.mode_manual.product_types.push(itemData)
          }
          //手动分类校验
          if(!this.validateManual(data)){
            return;
          }
          this._request(data);
        }
      },

      //推荐方式-自动推荐部分
      //选择产品分类
      updateCategory(categories) {
        if(categories.length > 6) {
          this.$message({...ALERT_OPTION, message: "{{__('最多选择:num项，以选择先后顺序展示', {num: 6})}}"});
          return 
        }
        this.model.categories = categories;
      },

      //推荐方式-手动添加部分
      updateManualCategory(category, index) {
        if (this.tableData[index].category_id != category.value) {
          this.tableData[index].category_id = category.value;
          this.tableData[index].products = [];
          this.tableData[index].default = category;
          this.$forceUpdate();
        }
      },

      //展开收起列表
      toggleList(item) {
        item.show = !item.show;
      },

      //添加分类
      handleAddCategory() {
        this.tableData.push({
          show: false, //是否展开
          category_id: null,
          products: [],
          default: {
            label: "", 
            value: ""
          }
        })
      },

      //产品弹窗操作
      //添加产品
      addProduct(index) {
        this.curCategory = this.tableData[index];
        this.showProductDialog = true;
      },

      handleCloseProductDialog() {
        this.showProductDialog = false;
      },

      //选择产品
      chooseProduct(product) {
        this.curCategory.products.push(product);
        this.curCategory.show = true;
      },

      //选择产品验证
      beforeChooseProduct(product) {
        for (let p of this.curCategory.products) {
          if(p.id == product.id) {
            this.$message({...ALERT_OPTION, message: PRODUCT_CATEGORY_TRANSLATE.EXIST_PRODUCT});
            return false;
          }
        }
        return true;
      },


      //分类顺序调整部分
      upCategory(index) {
        if (index > 0) {
          let temp = this.tableData[index];
          this.tableData[index] = this.tableData[index-1];
          this.tableData[index-1] = temp;
        }
        this.$forceUpdate();
      },

      downCategory(index) {
        if (index < this.tableData.length - 1) {
          let temp = this.tableData[index];
          this.tableData[index] = this.tableData[index+1];
          this.tableData[index+1] = temp;
        }
        this.$forceUpdate();
      },

      delCategory(index) {
        if(this.tableData.length > 1) {
          this.tableData.splice(index, 1);
        }
        this.$forceUpdate();
      },

      //分类中的产品调整顺序
      upProduct(cindex, pindex) {
        if (pindex > 0) {
          let temp = this.tableData[cindex].products[pindex];
          this.tableData[cindex].products[pindex] = this.tableData[cindex].products[pindex-1];
          this.tableData[cindex].products[pindex-1] = temp;
        }
        this.$forceUpdate();
      },

      downProduct(cindex, pindex) {
        if (pindex < this.tableData[cindex].products.length - 1) {
          let temp = this.tableData[cindex].products[pindex];
          this.tableData[cindex].products[pindex] = this.tableData[cindex].products[pindex+1];
          this.tableData[cindex].products[pindex+1] = temp;
        }
        this.$forceUpdate();
      },

      delProduct(cindex, pindex) {
        this.tableData[cindex].products.splice(pindex, 1);
      },
    }
  })
</script>