{% trans_default_category 'catalog/view/customerpartner/seller_store/home/index' %}
{# @file 产品选择弹窗 #}

{{ css([
  'static/customerpartner/seller_store/home/components/product-select-dialog.css'
]) }}

<script type="text/x-template" id="product-select-module">
  <div v-if="showModal" id="product-select-modal-container">
    <el-dialog class="product-select-modal ele ele-modal" title="Select Product" :visible="showModal" 
      @close="closeModal" append-to-body destory-on-close modal-append-to-body="true" :close-on-click-modal="false"
      width="640px" custom-class="product-select-modal__body"> 
      <div class="content-container">
        <div class="search-input-container ele ele-form">
          <div class="input-label">{{ __('请输入') }} ItemCode / MPN</div>
          <el-input class="search-input" ref="searchinput" placeholder="{{__('输入2位及以上字母开始搜索')}}" clearable v-model="searchText" @input="search"></el-input>
        </div>
        <div class="products-container">
          <div v-if="products.length===0" class="no-records">{{ __('没有数据') }}</div>
          <div v-else>
            <div v-for="product in products" @click="handleChoose(product)" class="product-item-container">
              <div class="content">
                <div class="product-img-container">
                  <img class="product-img" :src="product.image">
                </div>
                <div class="product-info">
                  <div class="product-info__title" :title="product.name">${product.name}</div>
                  <div class="product-info__code">${product.sku} / ${product.mpn}<span v-html="product.tags"></span></div>
                  <div class="product-info__footer">
                    <span class="product-info__footer-price"><span v-html="product.price"></span></span>
                    <span class="product-info__footer-qty">Qty Available: ${product.qty}</span>
                  </div>
                </div>
              </div>
              <div class="split-line"></div>
            </div>
          </div>
        </div>
      </div>
    </el-dialog>
  </div>
</script>
<script>
  Vue.component('product-select-dialog', {
    template: '#product-select-module',
    delimiters: ['${', '}'],
    props: {
      showModal: {
        type: Boolean,
        default: false
      },
      type: {
        type: String,
        default: ''
      },
      complex_transactions: {
        type: String,
        default: ''
      },
      category_id: {
        type: String,
        default: ''
      },
      beforeChoose: {
        type: Function,
        default: () => (()=> {return true})
      }
    },
    data: () => {
      return {
        axios: null,
        products: [], // 返回的产品列表
        searchText: '', //搜索框内容
        fun: null, //用于防抖的timeout
      }
    },
    watch: {
      showModal: {
        immediate: true,
        handler: function(val) {
          if(val) {
            this.$nextTick(function(){
              this.$refs.searchinput.focus();
            })
          }
        }
      },
    },
    computed: {
    },
    created() {
      this.axios = axios.create({});
    },
    methods: {
      //关闭弹窗
      closeModal() {
        this.clearModal();
        this.$emit('close');
      },
      //清空弹窗
      clearModal() {
        this.products = [];
        this.searchText = '';
      },
      searchProduct() {
        let data = {
          type: this.type,
          complex_transaction: this.complex_transactions,
          category_id: this.category_id,
          q: this.searchText.trim(),
        }
        var loading = layer.load(1, {
          shade: [0.5,'#fff']
        });
        let that = this;
        this.axios.get(API.PRODUCT_SERACH, {params: data}).then(res => {
          if(res.data.code == 200) {
            that.products = res.data.data.products;
          }
          layer.close(loading);
        }).catch(err => {
          layer.close(loading);
        })
      },

      //防抖
      debounce (fn,wait) {
        if (this.fun!==null){
            clearTimeout(this.fun);
        }
        this.fun = setTimeout(fn,wait);
      },

      //查询操作
      search() {
        if(this.searchText.length > 1) {
          this.debounce(this.searchProduct, 500);
        }
      },

      //选择产品
      handleChoose(product) {
        if (this.beforeChoose(product)) {
          this.$emit("choose", product);
          this.closeModal();
        }
      }
    }
  })
</script>


