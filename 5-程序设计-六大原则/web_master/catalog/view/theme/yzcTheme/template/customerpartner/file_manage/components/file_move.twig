{% trans_default_category 'catalog/view/customerpartner/account/file_manage/index' %}
<script type="text/x-template" id="file-move">
    <div>
        <el-dialog class="ele ele-modal file-move-box" :title="title" :visible.sync="dialogShow" :close-on-click-modal="false" 
        :close-on-press-escape="false" width="480px" @close="closeModel">
            <div class="content-container">
                <div class="text-tip-box">
                    <div class="crumb-group">
                        <p class="crumb-p ban-select" v-for="(item, index) in crumbsList" :key="index"
                            @click="handleCruble(index)">
                            <span>${ item.name }</span>
                        </p>
                    </div>
                </div>
                <div class="catalogue-content-box">
                    <div :class="{'catalogue-item pointer ban-select': true, 'ban-bgcolor': item.is_rename, 'is-active': chooseData.id === item.id && item.id !== undefined}" 
                        v-for="(item, index) in currCatalogue" :key="item.id" @click.stop="() => { !item.is_rename ? chooseFolder(item) : '' }"
                        @dblclick="() => { !item.is_rename ? enterFile(item) : '' }">
                        <span class="icon-box"><img src="public/image/file_manage/file.png" alt=""></span>
                        <div class="rename-input" v-show="item.is_rename">
                            <input type="text" :id="'moveRename' + item.id" maxLength="100" @keyup.enter="confirmName(item.id)" @keyup.esc="cancelName(index)">
                            <span class="confirm-cancel-box">
                                <i class="giga icon-zhengquewanchengchenggong is-b-c" @click.stop="confirmName(item.id)"></i>
                                <i class="giga icon-shibai" @click.stop="cancelName"></i>
                            </span>
                        </div>
                        <span class="overflow lh24" v-show="!item.is_rename">${ item.name }</span>
                    </div>
                    <p class="loading-tip-text" style="margin-top: 10px" v-if="loading"><i class="el-icon-loading mr-octal1"></i>{{ __("加载中…") }}</p>
                    <div class="oris-empty-container" style="margin-top: 10px" v-if="!loading && currCatalogue.length <= 0">
                        <div class="oris-empty-icon">
                            <img src="{{ asset("image/icons/empty.png") }}"></img>
                        </div>
                        <p class="none-text-tip">{{ __("暂无文件夹") }}</p>
                    </div>
                </div>
            </div>
            <template slot="footer">
                <div class="ele ele-btn ele-btn-group">
                    <div class="tip-folder-text" v-show="chooseData === '' && crumbsList.length === 1">
                        {{ __("不选择文件夹时，会:action全部文件夹下", {action: "${ isUpload ?  uploadText : moveText }" }) }}
                    </div>
                    <span>
                        <el-button type="text" @click="handleNewFolder" v-if="crumbsList.length < 4">{{ __("新建文件夹") }}</el-button>
                    </span>
                    <div class="ele ele-btn ele-btn-group">
                        <el-button @click="dialogShow = false">{{ __("取消") }}</el-button>
                        <el-button type="primary" @click="confirmMoveTo()" :loading="moveload">{{ __("确定") }}</el-button>
                    </div>
                </div>
            </template>
        </el-dialog>
    </div>
</script>
<script>
    Vue.component('file-move', {
        template: '#file-move',
        delimiters: [
            '${', '}'
        ],
        model: {
            prop: 'value',
            event: 'change'
        },
        props: {
            value: {
                type: Boolean,
                default: false
            },
            title: {
                type: String,
                default: 'title'
            },
            // 选中数据
            data: {
                type: Array,
                default: () => ([])
            },
            // 目录列表
            catalogue: {
                type: Array,
                default: () => ([])
            },
            isUpload: {
                type: Boolean,
                default: false
            },
            formData: {
                type: FormData,
                default: () => new FormData()
            },
            crumb: {
                type: Object,
                default: () => ([])
            },
        },
        data: () => ({
            axios: null,
            dialogShow: false,
            // 面包屑
            crumbsList: [{ name: '{{ __("全部文件") }}', id: 0, parent_id: 0 }],
            currCatalogue: [],
            renameIndex: '',
            loading: false,
            chooseData: '',
            moveload: false,
            uploadText: '{{ __("弹窗上传到") }}',
            moveText: '{{ __("弹窗移动到") }}'
        }),
        watch: {
            value(val) {
                this.dialogShow = val
                if (val) {
                    this.chooseData = ''
                    this.currCatalogue = this.catalogue.slice(0)
                    if (this.crumb.length > 0) {
                        this.crumbsList = this.crumb.map((item, index) => {
                            return { name: item.name, id: item.id, parent_id: this.crumb[index - 1] ? this.crumb[index - 1].id : 0 }
                        })
                    }
                }
            },
            async crumbsList(val) {
                if (this.dialogShow) {
                    this.getCatalogueList(val)
                }
            }
        },
        computed: {},
        created() {
            this.axios = axios.create({});
        },
        methods: {
            // 关闭弹窗
            closeModel() {
                this.$emit('change', false)
                this.$parent.moveObj.is_upload = false
                this.$parent.moveObj.title = '{{ __("移动到") }}'
                this.crumbsList = [{ name: '{{ __("全部文件") }}', id: 0, parent_id: 0 }]
                this.$parent.moveObj.data = []
                this.$parent.moveObj.select = ''
                document.getElementById('uploadAll').value = ''
            },
            // 进入文件夹
            enterFile(item) {
                this.chooseData = ''
                this.crumbsList.push(item)
            },
            // 面包屑跳转
            handleCruble(index) {
                if (index !== this.crumbsList.length - 1) {
                    if (this.currCatalogue[0] && this.currCatalogue[0].id === undefined) {
                        this.currCatalogue.shift()
                    }
                    this.chooseData = ''
                    this.crumbsList = this.crumbsList.slice(0, index + 1)
                }
            },
            // 新建文件夹
            handleNewFolder() {
                // 判断是否已存在 新建文件夹
                $('.catalogue-content-box').scrollTop(0)
                if (!this.currCatalogue[0] || this.currCatalogue[0].id !== undefined) {
                    this.chooseData = ''
                    this.renameIndex = 0
                    this.currCatalogue.unshift({
                        name: "",
                        parent_id: this.crumbsList[this.crumbsList.length - 1].id,
                        is_rename: true
                    })
                }
            },
            // 确认命名
            async confirmName(id) {
                let dom = $(`#moveRename${id}`)
                let callback = () => {
                    this.getCatalogueList(this.crumbsList)
                }
                await this.$parent.confirmNewFolder(
                    dom.val(),
                    id ?? this.crumbsList[this.crumbsList.length - 1].id,
                    callback,
                    true
                )
            },
            // 取消命名
            cancelName(index) {
                if (this.currCatalogue[0] && this.currCatalogue[0].id === undefined) {
                    this.currCatalogue.shift()
                }
            },
            // 获取目录列表
            async getCatalogueList(val) {
                this.loading = true
                this.currCatalogue = []
                this.currCatalogue = await this.$parent.getCatalogueList(val[val.length - 1].id)
                if(val.length === 1) {
                    this.$parent.moveObj.catalogue = this.currCatalogue
                }
                this.loading = false
            },
            // 选择文件夹
            chooseFolder(data) {
                if (data.id === this.chooseData.id) {
                    this.chooseData = ''
                    return null
                }
                this.chooseData = data
            },
            // 确定移动
            async confirmMoveTo() {
                if (this.isUpload) {
                    this.$emit('choose', {
                        crumb: this.crumbsList, formData: this.formData,
                        folder: this.chooseData || this.crumbsList[this.crumbsList.length - 1]
                    })
                } else {
                    this.moveload = true
                    await this.$parent.fileMoveTo(this.crumbsList, this.chooseData)
                    this.moveload = false
                    this.chooseData = ''
                }
            }
        }
    })
</script>