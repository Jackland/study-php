{% trans_default_category 'catalog/view/customerpartner/account/file_manage/index' %}

{{ this.title(__('文件管理', {}, 'catalog/seller_menu')) }}
{{ this.params('breadcrumbs', [
{
text: __('产品管理', {}, 'catalog/seller_menu'),
href: 'javascript:void(0);',
},
'current'
]) }}
{{ this.params('pageTitle', {backUrl: false}) }}
{{ cssOrigin(['/public/static/customerpartner/file_manage/account/index.css']) }}

{{ css([
'css/common/element-common.css',
'static/customerpartner/seller_store/home/components/edit-layout.css',
'static/customerpartner/seller_store/home/components/modules/modules_common.css'
]) }}
{{ cssOrigin([
'/catalog/view/javascript/product/element-ui.css',
'/catalog/view/theme/yzcTheme/stylesheet/app.css',
]) }}
{{ jsOrigin([
'/catalog/view/javascript/product/element-ui.js',
'/catalog/view/javascript/product/element-ui-en.js',
'/catalog/view/javascript/product/axios.min.js'
], 2) }}

{% include 'yzcTheme/template/customerpartner/file_manage/components/file_table.twig' %}
{% include 'yzcTheme/template/customerpartner/file_manage/components/file_move.twig' %}
{% include 'yzcTheme/template/customerpartner/file_manage/components/img_table.twig' %}
<div id="file_manage" class="file_manage" @click="lightTab === 'image' ? cancelRename() : ''" v-cloak>
    <div class="nav-oris">
        <div class="tab-content">
            <!-- 操作+搜索 start -->
            <div class="search-menu-box">
                <div class="ele ele-btn ele-btn-group">
                    <label class="upload-text" for="uploadAll" style="text-decoration: none;">
                        <div class="el-button header-btn el-button--primary">
                            <i class="giga icon-shangchuan1"></i>{{ __('上传') }}
                        </div>
                        <input type="file" id="uploadAll" :accept="acceptType" multiple
                            @change="handleUpload(event.target)">
                    </label>
                    <el-button class="header-btn" icon="giga icon-wenjianjia" @click.stop="handleNewFolder"
                        v-if="lightTab === 'all' && crumbsList.length < 4">{{ __('新建文件夹') }}</el-button>
                    <el-button v-show="isSelect" class="header-btn" icon="giga icon-a-moveto-01"
                        @click="handleMoveTo()">{{ __('移动到') }}</el-button>
                    <el-button class="header-btn" icon="giga icon-seller_bianji-big" @click.stop="handleImgRename"
                        v-show="lightTab === 'image' && imgCondition.selected.length === 1">{{ __('重命名') }}</el-button>
                    <el-button v-show="isSelect" class="header-btn" icon="giga icon-xianlu"
                        @click="verfiyCopyData()">{{ __('复制路径') }}</el-button>
                    <el-button v-show="isSelect" class="header-btn" icon="giga icon-lajitong1" @click="handleDelete()">
                        {{ __('删除') }}</el-button>
                </div>
                <div class="search-box">
                    <el-input v-model="searchObj.filename" placeholder="{{ __('搜索文件') }}" maxLength="100"
                        @clear="searchData(true)" clearable @keyup.enter.native="searchData(true)">
                    </el-input>
                    <i class="giga icon-V10_sousuotubiao pointer" @click="searchData(true)"></i>
                </div>
            </div>
            <!-- 操作+搜索 end -->

            <div class="tab-content file-content-box">
                <div class="text-tip-box">
                    <div class="crumb-group">
                        <p class="crumb-p ban-select" v-for="(item, index) in crumbsList" :key="index"
                            @click="handleCruble(index)">
                            <span>${ item.name }</span>
                        </p>
                        <p class="crumb-p ban-select" v-if="searchObj.is"><span> {{ __('搜索') }} "${ this.searchObj.keys }"</span></p>
                    </div>
                    <p>{{ __('已加载 :num 个:type，共 :total 个', {
                        num: "${ selectObj.length }",
                        total: "${ selectObj.total == 1.1 ? 0 : selectObj.total }",
                        type: '${fileCHN}'
                        }) }}
                    </p>
                </div>
                <div class="all-types">
                    <span v-for="one in allTabFilter" :class="{'active': one.value==lightTab}" @click="refreshAllTab(one.value)">${one.name}</span>
                </div>
                <!-- 所有文件 start -->
                <div class="tab-pane table-box {% if 'all' == tab or not tab %} active {% endif %}" id="tab-all">
                    <file-table ref="refall" type="all" :pageCurrent="pageCurrent" :pagesize="pagesize" :table-data="allFileList" :total="pageTotal"
                        :rename-index="renameIndex"  @get-file="getFile" @get-select="getSelect" @sort-change="sortChange"
                        v-if="lightTab === '' || lightTab === 'all'"></file-table>
                </div>
                <!-- 所有文件 end -->

                <!-- 图片 start -->
                <div class="tab-pane table-box" :class="{'active': 'image'==lightTab}" id="tab-image">
                    <img-table ref="refimg" type="img" :pageCurrent="pageCurrent" :pagesize="pagesize" :table-data="imgFileList" @get-file="getFile" :total="imgCondition.total"
                        :rename-index="renameIndex" @get-select="getSelect" v-if="lightTab === 'image'"></img-table>
                </div>
                <!-- 图片 end -->

                <!-- 文档 start -->
                <div class="tab-pane table-box" :class="{'active': 'document'==lightTab}" id="tab-document">
                    <file-table ref="refdoc" type="doc" :pageCurrent="pageCurrent" :pagesize="pagesize" :table-data="docFileList" :total="docCondition.total"
                        :rename-index="renameIndex" @get-select="getSelect" @sort-change="sortChange"
                        v-if="lightTab === 'document'"></file-table>
                </div>
                <!-- 文档 end -->

                <!-- 其他 start -->
                <div class="tab-pane table-box" :class="{'active': 'other'==lightTab}" id="tab-other">
                    <file-table ref="refother" :pageCurrent="pageCurrent" :pagesize="pagesize" type="other" :table-data="otherFileList" :total="otherCondition.total"
                        :rename-index="renameIndex" @get-select="getSelect" @sort-change="sortChange"
                        v-if="lightTab === 'other'"></file-table>
                </div>
                <!-- 其他 end -->
            </div>
        </div>
        <file-move ref="fileMove" v-model="moveObj.show" :is-upload="moveObj.is_upload" :form-data="moveObj.formData"
            :title="moveObj.title" :data="moveObj.data" :catalogue="moveObj.catalogue" :crumb="moveObj.crumb"
            @choose="chooseFolder"></file-move>
    </div>
</div>
<script type="text/javascript">
    ELEMENT.locale(ELEMENT.lang.en);
    const patter = 'A-Za-z0-9\\u4e00-\\u9fa5'
    const otherChar = '\\-\\_\\s\(\)\（\）'
    const renameReg = new RegExp(`^[${patter}][${patter}${otherChar}]{0,99}$`)
    const imgSuffix = /((\.jp(e)?g|\.png$|\.gif))$/i
    const docSuffix = /((\.doc(x)?|\.xls(x)?|\.ppt(x)?|\.pdf|\.txt))$/i
    const fileSuffix = /((\.jp(e)?g|\.png$|\.gif|\.doc(x)?|\.xls(x)?|\.ppt(x)?|\.pdf|\.txt))$/i
    const imgSize = 1024 * 1024 * 20
    const fileSize = 1024 * 1024 * 50
    const acceptType = '.jpg,.jpeg,.png,.gif,.doc,.docx,.xls,.xlsx,.ppt,.pptx,.pdf,.txt'
    // 名称判断
    const nameJudge = (type = 1, value, size = null) => {
        let errorTip = {
            '0': {
                [value.length > 100]: "{{ __('文件名称不能超过100字符') }}",
                [!renameReg.test(value)]: "{{ __('文件名称只能包含数字、中英文、空格、（）- 或者 _') }}",
                [!new RegExp(`^[${patter}]`).test(value)]: "{{ __('文件名称只能以中英文或者数字开头') }}",
                [value === '']: "{{ __('文件名称不能为空') }}",
            },
            '1': {
                [value.length > 50]: "{{ __('文件夹名称不能超过50字符') }}",
                [!renameReg.test(value)]: "{{ __('文件夹名称只能包含数字、中英文、空格、（）- 或者 _') }}",
                [!new RegExp(`^[${patter}]`).test(value)]: "{{ __('文件夹名称只能以中英文或者数字开头！') }}",
                [value === '']: "{{ __('文件夹名称不能为空') }}",
            },
            'other': {
                [imgSuffix.test(value) && size > imgSize]: "{{ __('单个图片文件大小不超过20M，其他文件不能超过50M') }}",
                [docSuffix.test(value) && size > fileSize]: "{{ __('单个图片文件大小不超过20M，其他文件不能超过50M') }}",
                [!fileSuffix.test(value)]: "{{ __('文件格式仅限图片jpeg/jpg/png/gif 或者文档doc(x)/xls(x)/ppt(x)/pdf/txt') }}",
                [fileSuffix.test(value) && value.replace(fileSuffix, '').length > 100]: "{{ __('文件名称不能超过100字符') }}",
            }
        }
        return errorTip[(size === null ? type : 'other')]['true'] || ''
    }
    // 上传完成提示
    const uploadOver = (number) => ELEMENT.Notification({
        type: 'success', title: '{{ __("上传完成") }}', message: `{{ __("共:number个文件", {number: "${number}"}) }}`,
        position: 'bottom-right', customClass: 'notice-style'
    });
    // 上传中提示
    const uploading = (number) => ELEMENT.Notification({
        type: 'upload', title: '{{ __("正在上传") }}', message: `{{ __("剩余:number个文件", {number: "${number}"}) }}<i class="el-icon-loading"></i>`,
        position: 'bottom-right', duration: 0, iconClass: 'icon-shangchuan2', customClass: 'notice-style is-load',
        showClose: false, dangerouslyUseHTMLString: true
    });
    // 上传异常提示
    const uploadError = (errorData, getFileType) => {
        let errorContent = ``
        errorData.forEach(item => {
            errorContent += `
                <div class="error-item">
                    <img src="${getFileType(item.name)}" alt="">
                    <div class="error-content">
                        <p class="error-title">${item.name}</p>
                        <p class="error-desc">${item.msg}</p>
                    </div>
                </div>`
        });
        return ELEMENT.Notification({
            type: 'warning', title: '{{ __("部分上传失败") }}', message: `${errorContent}`, duration: 0, position: 'bottom-right',
            customClass: 'notice-style is-error', dangerouslyUseHTMLString: true,
        });
    }
    // 复制文本
    const copyText = (value) => {
        const input = document.createElement('textarea');
        document.body.appendChild(input);
        input.value = value ?? ' ';
        input.setAttribute('readonly', '');
        input.select();
        input.setSelectionRange(0, input.value.length);
        return new Promise((resolve, reject) => {
            setTimeout(() => {
                try {
                    if (document.queryCommandSupported('copy')) {
                        document.execCommand('copy');
                    }
                    document.body.removeChild(input);
                    resolve()
                } catch (error) {
                    reject(error)
                }
            }, 500);
        })
    }

    new Vue({
        el: '#file_manage',
        delimiters: [
            '${', '}'
        ],
        data: () => ({
            // 上传文件类型
            acceptType: acceptType,
            lightTab: 'all',
            axios: null,
            isRename: false,
            isCopy: false,
            // 上传后进入对应目录
            isUploadEnter: true,
            // 错误文件
            errorFile: [],
            // 面包屑
            crumbsList: [{ name: '{{ __("全部文件") }}', id: 0, is_dir: 1 }],
            // 搜索对象
            searchObj: {
                filename: '',
                is: false,
                keys: '',
            },
            // 重命名下标
            renameIndex: { type: '', index: '' },
            // 全部文件
            allFileList: [],
            allCondition: {
                pageSize: 20,
                page: 1,
                sort: '',
                total: 1.1,
                selected: [],
                loading: false
            },
            // 图片
            imgFileList: [],
            imgCondition: {
                pageSize: 20,
                page: 1,
                total: 1.1,
                selected: [],
                loading: false
            },
            // 文档
            docFileList: [],
            docCondition: {
                pageSize: 20,
                page: 1,
                sort: '',
                total: 1.1,
                selected: [],
                loading: false
            },
            // 其他
            otherFileList: [],
            otherCondition: {
                pageSize: 20,
                page: 1,
                sort: '',
                total: 1.1,
                selected: [],
                loading: false
            },
            // 移动弹窗对象
            moveObj: {
                title: '{{ __("移动到") }}',
                show: false,
                data: [],
                catalogue: [],
                select: '',
                is_upload: false,
                formData: ''
            },
            // 是否刷新数据
            isReset: {
                all: true,
                img: true,
                doc: true,
                other: true
            },
            allTabFilter: [{
                name: "{{ __('全部') }}",
                value: 'all'
                },
                {
                name: "{{ __('图片') }}",
                value: 'image'
                },
                {
                name: "{{ __('文档') }}",
                value: 'document'
                },
                {
                name: "{{ __('其他') }}",
                value: 'other'
                }
            ],
            pagesize:20,
            pageCurrent: 1,
            pageTotal:0
        }),
        computed: {
            hasFolder() {
                return this[`${this.islight}Condition`].selected.filter(item => {
                    return item.is_dir === 1
                })
            },
            selectObj() {
                let selected = {
                    'all': { length: this.allFileList.length, total: this.allCondition.total },
                    'image': { length: this.imgFileList.length, total: this.imgCondition.total },
                    'document': { length: this.docFileList.length, total: this.docCondition.total },
                    'other': { length: this.otherFileList.length, total: this.otherCondition.total },
                }
                return selected[this.lightTab]
            },
            islight() {
                let selected = {
                    'all': 'all',
                    'image': 'img',
                    'document': 'doc',
                    'other': 'other',
                }
                return selected[this.lightTab]
            },
            isSelect() {
                let selected = {
                    'all': this.allCondition.selected.length > 0,
                    'image': this.imgCondition.selected.length > 0,
                    'document': this.docCondition.selected.length > 0,
                    'other': this.otherCondition.selected.length > 0,
                }
                return selected[this.lightTab]
            },
            fileCHN() {
                let selected = {
                    'all': "{{ __('小文件') }}",
                    'image': "{{ __('小图片') }}",
                    'document': "{{ __('小文档') }}",
                    'other': "{{ __('小文件') }}",
                }
                return selected[this.lightTab]
            }
        },
        async created() {
            this.axios = axios.create({})
            this.moveObj.catalogue = await this.getCatalogueList();
            this.getFile()
        },
        methods: {
            // 全选
            pageSelectAllRow(checkbox, selectBack, callback = null) {
                let selects = $("input[name^='selected']:not(:disabled)")
                selects.prop('checked', checkbox.checked)
                if (callback) {
                    callback()
                }
                selectBack()
                if (this.renameIndex.index !== '') {
                    this.cancelName(this.renameIndex.index, false)
                }
            },
            // 单选
            pageSelectOneRow(checkbox, selectBack, callback = null) {
                let headInput = $("table thead th input[type=checkbox]")
                selectBack()
                if (this[`${this.islight}Condition`].selected.length === $("table tbody td input[name^='selected']:not(:disabled)").length) {
                    headInput.prop('checked', true)
                } else {
                    headInput.prop('checked', false)
                }
                if (callback) {
                    callback()
                }
                if (this.renameIndex.index !== '') {
                    this.cancelName(this.renameIndex.index, false)
                }
            },
            // 搜索数据
            searchData(isReset = false) {
                if (!this[`${this.islight}Condition`].loading) {
                    this.searchObj.is = this.searchObj.filename !== '' ? true : false
                    this.searchObj.keys = this.searchObj.filename
                    if (isReset) {
                        this.setReset()
                    }
                    this[`${this.islight}Condition`].loading = true
                    this[`${this.islight}FileList`] = []
                    if (!this.moveObj.show) {
                        this[`${this.islight}Condition`].selected = []
                    }
                    this.$refs[`ref${this.islight}`].scrollLoad( true)
                }
            },
            // 排序处理
            sortChange({ sort, type }) {
                this[`${type}Condition`].sort = sort
                this.searchData()
            },
            // 多选数据
            getSelect({ selected, type }) {
                if (!this.moveObj.show) {
                    this[`${type}Condition`].selected = selected
                }
            },
            // 设置刷新状态
            setReset() {
                this.isReset = {
                    all: true,
                    img: true,
                    doc: true,
                    other: true
                }
            },
            // 获取tab高亮值
            getTabLight(tab) {
                try {
                    let currTab = tab.href.match(/\#tab\-(\S+)/)[1]
                    if (currTab !== this.lightTab) {
                        this[`${this.islight}Condition`].selected = []
                        this.lightTab = tab.href.match(/\#tab\-(\S+)/)[1]
                        // this.searchObj.filename = ''
                        this.cancelRename()
                        if (this.isReset[this.islight]) {
                            this.$nextTick(() => {
                                this.searchData()
                            })
                        }
                    }
                } catch (error) { }
            },
            // 获取文件类型图片
            getFileType(filename, is_dir = 0) {
                if (!is_dir) {
                    let typeList = {
                        [/\.?jp(e)?g$/i.test(filename)]: 'public/image/file_manage/img.png',
                        [/\.?png$/i.test(filename)]: 'public/image/file_manage/img.png',
                        [/\.?gif$/i.test(filename)]: 'public/image/file_manage/img.png',
                        [/\.?doc(x)?$/i.test(filename)]: 'public/image/file_manage/word.png',
                        [/\.?xls(x)?$/i.test(filename)]: 'public/image/file_manage/xls.png',
                        [/\.?ppt(x)?$/i.test(filename)]: 'public/image/file_manage/ppt.png',
                        [/\.?pdf$/i.test(filename)]: 'public/image/file_manage/pdf.png',
                        [/\.?txt$/i.test(filename)]: 'public/image/file_manage/txt.png'
                    }
                    return typeList['true'] || 'public/image/file_manage/other.png'
                } else {
                    return 'public/image/file_manage/file.png'
                }
            },
            // 选择目标目录后
            chooseFolder({ formData, folder, crumb ,index}) {
                let data = [], errorList = this.errorFile.slice(0), successList = []
                formData.getAll('file').forEach(item => {
                    let requestData = new FormData()
                    requestData.append('parent_id', folder.id)
                    requestData.append('file', item)
                    data.push(this.fileUpload(requestData))
                })
                this.moveObj.show = false
                let loading = uploading(formData.getAll('file').length)
                Promise.all(data).then(res => {
                    res.map(item => {
                        if (item.data.code === 0) {
                            errorList.push({
                                name: item.data.data.name,
                                msg: item.data.msg
                            })
                        } else if (item.data.code === 200) {
                            successList.push(item.data)
                        }
                    })
                    loading.close()
                    if (errorList.length > 0) {
                        setTimeout(() => {
                            uploadError(errorList, this.getFileType)
                        }, 0)
                    }
                    if (successList.length > 0) {
                        uploadOver(successList.length)
                    }
                    document.getElementById('uploadAll').value = ''
                    if (this.isUploadEnter) {
                        let data = crumb.map(item => {
                            return { name: item.name, id: item.id, is_dir: 1 }
                        })
                        if (folder.id !== data[data.length - 1].id) {
                            data.push({ name: folder.name, id: folder.id, is_dir: 1 })
                        }
                        this.crumbsList = data
                    }
                    if(index==1){
                        this.searchData(true)
                    }
                    this.setReset()
                }).catch(error => {
                })
            },
            // 选择文件改变
            async handleUpload(dom) {
                ELEMENT.Notification.closeAll()
                this.errorFile = []
                if (Object.values(dom.files).length > 0) {
                    let formData = new FormData()
                    for (const item of Object.values(dom.files)) {
                        let tip = nameJudge(0, item.name, item.size)
                        if (tip) {
                            this.errorFile.push({ name: item.name, msg: tip })
                        } else {
                            formData.append('file', item)
                        }
                    }
                    if (Object.values(dom.files).length === this.errorFile.length) {
                        uploadError(this.errorFile, this.getFileType)
                        document.getElementById('uploadAll').value = ''
                        return
                    }
                    this.chooseFolder({formData,folder: this.crumbsList[this.crumbsList.length - 1],crumb:this.crumbsList,index:1})
                }
            },
            // 面包屑跳转
            handleCruble(index) {
                if (index !== this.crumbsList.length - 1) {
                    this.cancelRename()
                    this.crumbsList = this.crumbsList.slice(0, index + 1)
                }
            },
            // 移动到处理
            handleMoveTo(select) {
                this.moveObj.show = true
                this.moveObj.data = this[`${this.islight}Condition`].selected
                this.moveObj.select = select
                this.cancelName(this.renameIndex.index)
            },
            // 删除处理
            handleDelete(deleteData) {
                this.cancelName(this.renameIndex.index)
                layer.open({
                    type: 1,
                    title: '{{ __("确定") }}',
                    closeBtn: 1,
                    skin: 'oris-layer',
                    shadeClose: true,
                    offset: 'auto',
                    area: ['400px', 'auto'],
                    content: '{{ __("是否确认删除选中的文件？") }}',
                    btn: ['{{ __("确定") }}', '{{ __("取消") }}'],
                    yes: () => {
                        let data = deleteData ?? this[`${this.islight}Condition`].selected
                        this.delectFile(data)
                        layer.closeAll();
                    }
                });
            },
            // 图片重命名
            handleImgRename() {
                if (this.renameIndex.index === '') {
                    let index = this.imgFileList.findIndex(item => item.id === this.imgCondition.selected[0].id)
                    let item = this.imgFileList[index]
                    this.renameIndex.index = index
                    this.renameIndex.type = 'img'
                    this.$set(item, 'is_rename', true)
                    this.$nextTick(() => {
                        let dom = $(`#imgRename${item.id}`)
                        dom.val(item.name.replace(fileSuffix, ''))
                        dom.select()
                    })
                }
            },
            // 新建文件夹
            handleNewFolder() {
                // 判断是否已存在 新建文件夹
                $('.scroll-box').scrollTop(0)
                if (!this[`${this.islight}FileList`][0] || this[`${this.islight}FileList`][0].id !== undefined) {
                    if (this.renameIndex.index !== '') { // 取消正在重命名的
                        this[`${this.islight}FileList`][this.renameIndex.index].is_rename = false
                    }
                    this[`${this.islight}FileList`].unshift({
                        is_dir: 1,
                        name: "",
                        path: "",
                        size: 0,
                        suffix: "",
                        time: "",
                        is_rename: true
                    })
                }
            },
            // 复制路径
            async handleCopyPath(fileList = null) {
                if (!this.isCopy) {
                    this.isCopy = true
                    const path = fileList.map(item => item.virtual_path).join('|')
                    await copyText(path)
                    if (this.hasFolder.length > 0) { 
                        $.toast({
                            heading: false,
                            text: '{{ __("只支持复制文件路径，文件夹路径没有复制") }}',
                            position: 'top-center',
                            showHideTransition: 'fade',
                            icon: 'success',
                            hideAfter: 3000,
                            allowToastClose: false,
                            loader: false,
                        });
                    } else {
                        $.toast({
                            heading: false,
                            text: '{{ __("复制路径成功") }}',
                            position: 'top-center',
                            showHideTransition: 'fade',
                            icon: 'success',
                            hideAfter: 3000,
                            allowToastClose: false,
                            loader: false,
                        });
                    }
                    this.isCopy = false
                }
            },
            // 验证复制路径数据
            verfiyCopyData() {
                let fileList = this[`${this.islight}Condition`].selected.filter(item => {
                    return item.is_dir === 0
                })
                this.handleCopyPath(fileList)
            },
            // 取消命名
            cancelName(index) {
                if (index !== '') {
                    let data = this[`${this.islight}FileList`]
                    this.renameIndex.index = ''
                    this.renameIndex.type = ''
                    if (!data[index].id) {
                        data.splice(index, 1)
                    }
                    if(data.length>0){
                    data[index].is_rename = false
                    }
                }
            },
            // 取消 新建文件夹 和 重命名 判断
            cancelNewFolder(item, index, type) {
                if (item.id === undefined) {
                    this[`${type}FileList`].splice(index, 1)
                } else {
                    this.$set(item, 'is_rename', false)
                }
            },
            // 取消所有重命名
            cancelRename() {
                if (this.renameIndex.index !== '') {
                    let item = this[`${this.renameIndex.type}FileList`][this.renameIndex.index]
                    this.cancelNewFolder(item, this.renameIndex.index, this.renameIndex.type)
                    this.renameIndex.index = ''
                    this.renameIndex.type = ''
                }
            },
            // 确认命名
            async confirmName(index, id, callback = null, status) {
                if (!this.isRename) {
                    this.isRename = true
                    let dom = $(`#${id}`)
                    let value = dom.val()
                    let data = this[`${this.islight}FileList`]
                    let errorTip = nameJudge(data[index].is_dir, value)
                    if (!errorTip) {
                        if (data[index].id === undefined) {
                            await this.confirmNewFolder(value, null, callback, status)
                        } else {
                            await this.confirmRename(value, data[index].id)
                        }
                    } else {
                        dom.select()
                        $.toast({
                            heading: false,
                            text: errorTip,
                            position: 'top-center',
                            showHideTransition: 'fade',
                            icon: 'error',
                            hideAfter: 3000,
                            allowToastClose: false,
                            loader: false,
                        });
                    }
                    this.renameIndex.index = ''
                    this.renameIndex.type = ''
                    this.isRename = false
                }
            },
            // 提交新建文件夹
            async confirmNewFolder(value, parent_id, callback, status) {
                let parent = this.crumbsList
                let url = '/index.php?route=account/file_manage/index/makeDir'
                let ret = await this.axios.post(url, {
                    name: value,
                    parent_id: parent_id ?? parent[parent.length - 1].id,
                });
                let result = ret.data
                if (result.code === 200) {
                    $.toast({
                        heading: false,
                        text: result.msg,
                        position: 'top-center',
                        showHideTransition: 'fade',
                        icon: 'success',
                        hideAfter: 3000,
                        allowToastClose: false,
                        loader: false,
                    });
                    if (callback) {
                        callback()
                    } else {
                        this.moveObj.catalogue = await this.getCatalogueList()
                    }
                    this.pageCurrent = 1
                    if (!status) {
                        this.getFile()
                    }
                } else {
                    $.toast({
                        heading: false,
                        text: result.msg,
                        position: 'top-center',
                        showHideTransition: 'fade',
                        icon: 'error',
                        hideAfter: 3000,
                        allowToastClose: false,
                        loader: false,
                    });
                }
            },
            // 提交重命名
            async confirmRename(value, id) {
                let parent = this.crumbsList
                let url = '/index.php?route=account/file_manage/index/rename'
                let ret = await this.axios.post(url, {
                    id: id,
                    name: value,
                });
                let result = ret.data
                if (result.code === 200) {
                    $.toast({
                        heading: false,
                        text: result.msg,
                        position: 'top-center',
                        showHideTransition: 'fade',
                        icon: 'success',
                        hideAfter: 3000,
                        allowToastClose: false,
                        loader: false,
                    });
                    this.setReset()
                    this.moveObj.catalogue = await this.getCatalogueList()
                    this.searchData()
                } else {
                    $.toast({
                        heading: false,
                        text: result.msg,
                        position: 'top-center',
                        showHideTransition: 'fade',
                        icon: 'error',
                        hideAfter: 3000,
                        allowToastClose: false,
                        loader: false,
                    });
                }
            },
            //获取文件列表
            async getFile(){
                let url = 'index.php?route=account/file_manage/index/list'
                let ret = await this.axios.get(url, {
                    params: {
                        file_type: this.lightTab,
                        page: this.pageCurrent,
                        page_size:this.pagesize,
                        keyword: this.searchObj.filename,
                        parent_id: this.crumbsList[this.crumbsList.length - 1].id,
                        sort_val: this[`${this.islight}Condition`]['sort']
                    }
                });
                let result = ret.data.data;
                this[`${this.islight}Condition`].total = result.count
                this.pageTotal = result.count
                this[`${this.islight}FileList`] = result.list;
                if(!this.moveObj.show) {
                    this.$refs[`ref${this.islight}`].getSelectData()
                    let headInput = $("#selectAll")
                    headInput.prop('checked', false)
                }
            
            },
            // 触底加载
            async scrollLoad(type, reset = false) {
                if (reset) {
                    this[`${this.islight}Condition`].page = 1
                    this[`${this.islight}Condition`].total = 1.1
                    this[`${this.islight}FileList`] = []
                }
                this.isReset[this.islight] = false;
                this.pageCurrent = 1;
                this.pagesize = 20;
                let url = 'index.php?route=account/file_manage/index/list'
                let ret = await this.axios.get(url, {
                    params: {
                        file_type: this.lightTab,
                        page: this.pageCurrent,
                        page_size:this.pagesize,
                        keyword: this.searchObj.filename,
                        parent_id: this.crumbsList[this.crumbsList.length - 1].id,
                        sort_val: this[`${this.islight}Condition`]['sort']
                    }
                });
                let result = ret.data.data
                this.pageTotal = result.count
                //this[`${type}Condition`].page++
                this[`${type}Condition`].total = result.count
                this[`${type}FileList`]= result.list;
                if(!this.moveObj.show) {
                    this.$refs[`ref${this.islight}`].getSelectData()
                    let headInput = $("#selectAll")
                    headInput.prop('checked', false)
                }
            },
            // 获取目录列表
            async getCatalogueList(id = 0) {
                let url = 'index.php?route=account/file_manage/index/dirList'
                let ret = await this.axios.get(url, {
                    params: {
                        parent_id: id,
                    }
                });
                return ret.data.data
            },
            // 确定文件移动
            async fileMoveTo(crumb, choose) {
                let lastCrumb = crumb[crumb.length - 1]
                if (choose.id === undefined && lastCrumb.id === undefined) {
                    $.toast({
                        heading: false,
                        text: '{{ __("请选择文件夹") }}',
                        position: 'top-center',
                        showHideTransition: 'fade',
                        icon: 'error',
                        hideAfter: 3000,
                        allowToastClose: false,
                        loader: false,
                    });
                    return null
                }
                let select = this.moveObj.select || this[`${this.islight}Condition`].selected
                let selectString = select.map(item => item.id).join()
                let url = 'index.php?route=account/file_manage/index/move'
                let ret = await this.axios.post(url, {
                    ids: selectString,
                    to_parent_id: choose.id ?? lastCrumb.id,
                });
                if (ret.data.code === 200) {
                    this.moveObj.show = false
                    this.$refs[`ref${this.islight}`].selectData = []
                    this.searchData(true)
                    this.moveObj.catalogue = await this.getCatalogueList()
                    $.toast({
                        heading: false,
                        text: ret.data.msg,
                        position: 'top-center',
                        showHideTransition: 'fade',
                        icon: 'success',
                        hideAfter: 3000,
                        allowToastClose: false,
                        loader: false,
                    });
                } else {
                    $.toast({
                        heading: false,
                        text: ret.data.msg,
                        position: 'top-center',
                        showHideTransition: 'fade',
                        icon: 'error',
                        hideAfter: 3000,
                        allowToastClose: false,
                        loader: false,
                    });
                }
            },
            // 删除文件
            async delectFile(data) {
                let url = 'index.php?route=account/file_manage/index/delete'
                let ret = await this.axios.post(url, {
                    ids: data.map(item => item.id).join(',')
                })
                if (ret.data.code === 200) {
                    this.$refs[`ref${this.islight}`].selectData = []
                    this.searchData(true)
                    this.moveObj.catalogue = await this.getCatalogueList()
                    $.toast({
                        heading: false,
                        text: ret.data.msg,
                        position: 'top-center',
                        showHideTransition: 'fade',
                        icon: 'success',
                        hideAfter: 3000,
                        allowToastClose: false,
                        loader: false,
                    });
                } else {
                    $.toast({
                        heading: false,
                        text: ret.data.msg,
                        position: 'top-center',
                        showHideTransition: 'fade',
                        icon: 'error',
                        hideAfter: 3000,
                        allowToastClose: false,
                        loader: false,
                    });
                }
            },
            // 文件上传
            fileUpload(formData) {
                return new Promise((resolve, reject) => {
                    let url = 'index.php?route=account/file_manage/index/upload'
                    this.axios.post(url, formData).then(res => {
                        resolve(res)
                    }).catch(error => {
                        reject(error)
                    })
                })
            },
            refreshAllTab(value) {
                this.lightTab = value;
                this.pageCurrent = 1;
                this.pagesize = 20;
                this[`${this.islight}Condition`].selected = []
                this.cancelRename()
                this.$nextTick(() => {
                    this.getFile()
                })
            },
        },
        watch: {
            crumbsList(val) {
                this.$nextTick(() => {
                    this.$set(this.isReset, 'all', true)
                    this.searchData()
                })
            },
            'renameIndex.index'(val) {
                if (val !== '') {
                    $('.scroll-box').attr('style', 'overflow: hidden')
                } else {
                    $('.scroll-box').attr('style', 'overflow-y: auto')
                }
            },
            'moveObj.show'(val) {
                if (!val) {
                    this.searchData()
                }
            }
        }
    })
</script>