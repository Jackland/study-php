{% trans_default_category 'catalog/view/customerpartner/seller_store/home/index' %}

{{ css([
  'css/common/element-common.css',
  'static/customerpartner/seller_store/home/components/edit-layout.css',
]) }}

<script type="text/x-template" id="edit-layout-container">
  <div>
    {# 左侧模块选择部分 #}
    <div>
      <el-aside id="module-picker-container" width="168px" :class="{ 'hide-sidebar': !showSide }">
        <div>
          <div class="title">
            {{ __('页面模块') }}
          </div>
          <div class="subtitle">
            {{ __('选择模块拖至右侧') }}
          </div>
          <draggable
            :list="modules" :options="{ sort: false }"
            :group="{ name: 'components', pull: 'clone', put: false }"
            :clone="cloneModule" :move="checkMove"
            ghost-class="ghost-module"
          >
            <div class="module-item-container" v-for="module in modules">
              <div class="module-item">
                <div>${module.title}</div>
                <div class="skeleton-img">
                  <img :src="module.pickImg"></img>
                </div>
              </div>
              <div class="draggle-module-item">
                {{ __("鼠标松开，模块会放到这里") }}
                <div class="arrow-icon"><i class="giga icon-xiangshangjiantou-01"></i></div>
              </div>
            </div>
          </draggable>
        </div>
        <div class="blinking-container" v-show="pickShacking"></div>
      </el-aside>
      <div class="aside-btn" @click="toggleModulePicker" :class="{ 'hide-sidebar-btn': !showSide }">
        <i v-if="showSide" class="giga icon-V10_zuocejiantou"></i>
        <i v-else class="giga icon-V10_youjiantougengduo"></i>
      </div>
    </div>


    {# 右侧编辑部分 #}
    <div id="edit-area-container" v-show="showContent">
      <el-main>
        <div class="tab-header-container">
          <div class="tab-header" v-if="(unpublished.modules && unpublished.modules.length) || (published.modules && published.modules.length) ">
            <div class="unpublished-tab tab-item" :class="{'active': activeTab == 'unpublished'}" 
              v-if="unpublished.modules && unpublished.modules.length" @click="clickTab('unpublished')">
              <i class="giga icon-weifabu"></i> {{ __('草稿箱') }}
            </div>
            <div class="published-tab tab-item" :class="{'active': activeTab == 'published'}" 
              v-if="published.modules && published.modules.length" @click="clickTab('published')">
              <i class="giga icon-fabu-01"></i> {{ __('已发布') }}
            </div>
          </div>
          <div class="operation-header">
            <div class="header-description">
              <div class="status-container" v-if="published && activeTab == 'published'">
                <div class="status-text" v-if="published && published.audit_info.status != 30">
                  ${published.updated_time} {{__('修改')}}
                </div>
                <div class="status-text" v-else>
                  ${published.updated_time} {{__('发布')}}
                </div>
                <div class="status-state" v-if="published && published.audit_info.status == 20">
                  <i class="giga icon-Action-Time"></i>
                  {{ __('正在审核中') }}
                </div>
                <div class="status-state success-icon" v-if="published && published.audit_info.status == 30">
                  <i class="giga icon-V10_danchuangchenggong"></i>
                  {{__('已发布')}}
                </div>
                <div class="status-state error-icon" v-if="published && published.audit_info.status == 40">
                  <i class="giga icon-Group-1"></i>
                  {{__('已驳回')}}
                </div>
                <div class="status-refuse-reason" v-if="published.audit_info.refuse_reason">
                  <el-tooltip class="item" effect="dark" placement="top">
                    <i class="giga icon-V10-wenhaotishi"></i>
                    <div slot="content" class="ele ele-tooltip-content">
                      ${published.audit_info.refuse_reason}
                    </div>
                  </el-tooltip>
                </div>
                <div class="status-cancel-audit" v-if="published.audit_info.status == 20">
                  <div class="cancel-audit-btn" @click="handlerCancelAudit">{{__('取消审核')}}</div>
                </div>
              </div>
            </div>
            <div class="header-btn-group ele ele-btn">
              <el-button class="header-btn" :disabled="instanceList.length <= 0" @click="handlePreview">{{ __('预览') }}</el-button>
              <el-button class="header-btn" :disabled="instanceList.length <= 0" @click="handleSave">{{ __('保存') }}</el-button>
              <el-button class="header-btn" :disabled="instanceList.length <= 0" type="primary" @click="handlePublish">{{ __('去发布') }}</el-button>
            </div>
          </div>
        </div>
        <div class="store-header-container store-header" :class="{'empty-store-header': !((unpublished.modules && unpublished.modules.length) || (published.modules && published.modules.length)) }">
          <store-header></store-header>
        </div>
        <div class="draggable-container">
          <div id="draggable-list-container">
            <draggable :list="instanceList" group="components" @change="handleListChange"
              :class="{'no-module':instanceList.length==0}" ghost-class="ghost-module" tag="div">
              <div v-if="instanceList.length != 0" v-for="(module, i) in instanceList" :key="module" 
                class="module-content store-module" :id="'module-content-' + i" @dragover="handleDragOver(i)"
                @drop="handleDragEnd('drop')" @dragleave="handleDragEnd('leave')">
                <component class="module-item" :ref="'module-' + i" :is="module.component"
                  :data="module.data" :key="module" @set-module="setModule($event, i)"></component>
                <div class="hover-cover">
                </div>
                <div class="highlight-cover" :class="{'highlight-cover-show': curDragOverIdx == i}">
                </div>
                {# 操作蒙版 #}
                <div class="draggle-module-item full-module" v-if="instanceList.length >= 8 && curDragOverIdx == i">
                  {{ __('最多可添加:num个模块，模块已添加满', {num: 8}) }}
                  <div class="arrow-icon"><i class="giga icon-xiangshangjiantou-01"></i></div>
                </div>
                <div class="cover">
                  <div class="operation-cover"></div>
                  <div class="module-title">
                    ${module.title}
                  </div>
                  <div class="no-data-tip" v-show="!module.data">{{__('该区域内暂未设置内容，将不会在页面中展示')}}</div>
                  <div class="module-btn-group"> 
                    <div class="up-icon ele ele-action-icon" :class="{'is-disabled': i <= 0}" @click="upModule(i)">
                      <i class="giga icon-xiangshangjiantou-01"></i>
                    </div>
                    <div class="down-icon ele ele-action-icon" :class="{'is-disabled': i >= instanceList.length - 1}" @click="downModule(i)">
                      <i class="giga icon-xiangxiajiantou-01"></i>
                    </div>
                    <div class="cover-btn delete-btn" @click="handleDelModule(i)"><i class="giga icon-lajitong1"></i>{{__('删除')}}</div>
                    <div class="cover-btn edit-btn" @click="handleEditModule(i)"><i class="giga icon-bianji2"></i>{{__('编辑')}}</div>
                  </div>
                  <div class="cover-btn add-btn" @click="handleAddModule">
                    <i class="el-icon-plus" style="font-weight: bold"></i>{{__('添加模块')}}
                  </div>
                </div>
              </div>
              <div class="noitem-div" v-if="instanceList.length == 0">
                <div class="noitem-tip">
                  {{ __("请从左侧选择模块，并拖拽至该区域。") }}
                </div>
              </div>
            </draggable>
          </div>
        </div>
        <transition name="cannnot-add-module">
          <div class="cannot-add-module" v-if="instanceList.length >= 8">
            {{__('最多可添加:num个模块，模块已添加满', {num: 8})}}
          </div>
        </transition>
      </el-main>
    </div>
  </div>
</script>
<script>
  // 翻译部分
  EDIT_LAYOUT_TRANSACTION = {
    DELETE_MODULE:"{{__('删除模块会将模块内的数据一并删除，确定要删除吗？')}}",
    DELETE_SUCCESS: "{{__('删除成功')}}",
    SAVE_SUCCESS: "{{__('保存成功')}}",
    CANCEL_AUDIT: "{{__('是否取消审核')}}",
    CANCEL_SUCCESS: "{{__('取消成功')}}",
    CONFIRM: "{{__('确认')}}",
    OVER_LIMIT: "{{__('添加失败，模块已达到上限')}}"
  }

</script>
<script>
/**
 * @file 右侧编辑区域
 */

const SELLER = {{ seller | json_encode() }};

Vue.component('edit-layout', {
  template: '#edit-layout-container',
  delimiters: ['${', '}'],
  data: () => {
    return {
      modules: [],//左侧选择列表
      instanceList: [], //右侧渲染内容
      limit: 8, // 右侧模块数量上限
      pickShacking: false, //picker模块闪烁
      curDragOverIdx: -1, //显示提示
      duration: 500, //添加删除动画时间
    }
  },
  props: {
    options: {
      type: Object,
      default: () => ({})
    },
    defaultInstances: {
      type: Array,
      default: () => ([])
    },
  },  
  created() {
    this.initModules();
  },
  watch: {
    activeTab: {
      immediate: true,
      handler: function() {
        let that = this;
        this.$nextTick(function() {
          that.instanceList = store.state.activeData;
        })
      }
    },
    instanceList: {
      immediate: true,
      handler: function() {
        this.updateTitle();
      }
    },
    startFromTpl: {
      immediate: true,
      handler: function() {
        let that = this;
        this.$nextTick(function() {
          let instances = [];
          for (let value of Object.values(MODULE_TYPE)) {
            instances.push({
              type: value,
              title: MODULE_LIST[value]['title'],
              pickImg: MODULE_LIST[value]['skeleton'],
              component: MODULE_COMPO[value] 
            })
          }
          that.instanceList = instances;
        })
      }
    },
  },
  computed: {
    showSide() {
      return store.state.showSide;
    },
    showContent() {
      return store.state.showContent;
    },
    unpublished() {
      return store.state.unpublished;
    },

    published() {
      return store.state.published;
    },

    activeTab() {
      return store.state.activeTab;
    },
    
    startFromTpl() {
      return store.state.startFromTpl;
    }
  },
  methods: {
    /**
     * 初始化模块内容
     */
    initModules() {
      for(let key in MODULE_LIST) {
        this.modules.push({
          type: key,
          title: MODULE_LIST[key]['title'],
          pickImg: MODULE_LIST[key]['skeleton'],
          component: MODULE_COMPO[key] 
        })
      }
    },

    /**
     * 复制左侧模板
     */
    cloneModule(orig_data) {
      return _.cloneDeep(orig_data);
    },

    /**
     * 设置模块数据
     */
    setModule(data, i) {
      this.instanceList[i].data = _.cloneDeep(data);
      this.$message({...ALERT_OPTION, message: MODULE_COMMON_TRANSLATE.SAVE_SUCCESS});
      this.$forceUpdate();
    },

    /**
     * 显示隐藏侧边栏
     */
    toggleModulePicker() {
      store.dispatch('showSide', !this.showSide);
    },

    /** 
     * 列表数据变化监听
     */
    handleListChange(evt) {
      // 新增模块动画
      let that = this;
      this.$nextTick(function() {
        let index = 0;
        if (this.instanceList.length > 1 ) {          
          index = evt.added ? evt.added.newIndex : null;
        }
        if (index != null) {
          $('#module-content-' + index).hide();
          $('#module-content-' + index).show(that.duration);
        }
        this.$forceUpdate();

        setTimeout(function(){
          let offsetTop = $('#module-content-' + index).offset().top ;
          let goTo = offsetTop + document.getElementById("edit-area-container").scrollTop - 200;
          $('#edit-area-container').animate({
              scrollTop: goTo
          }, 200);
        },500)
      })
    },

    /**
     * 拖动左侧模块的校验
     * @description 校验上限为8个模块
     */
    checkMove() {
      return this.instanceList.length < this.limit;
    },

    // ---- 模块操作部分 ----
    // %module start
    
    //上移模块
    upModule(index) {
      if (index > 0) {
        let that = this;
        $('#module-content-' + index).fadeOut(200)
        setTimeout(() => {
          let temp = this.instanceList[index];
          this.instanceList[index] = this.instanceList[index-1];
          this.instanceList[index-1] = temp;
          $('#module-content-' + index).fadeIn(200)
          that.$forceUpdate();
        }, 200)
      }
      this.$forceUpdate();
    },

    //下移模块
    downModule(index) {
      if (index < this.instanceList.length - 1) {
        let that = this;
        $('#module-content-' + index).fadeOut(200)
        setTimeout(() => {
          let temp = that.instanceList[index];
          that.instanceList[index] = that.instanceList[index+1];
          that.instanceList[index+1] = temp;
          $('#module-content-' + index).fadeIn(200)
          that.$forceUpdate();
        }, 200)
      }
    },

    handleAddModule() {
      // picker模块闪烁
      // TODO 控制闪烁
      let _this = this;
      if (_this.pickShacking) return;
      _this.$message({...ALERT_OPTION, message: "{{ __("请从左侧选择模块，并拖拽至该区域。") }}"});
      store.dispatch('showSide', true);
      _this.pickShacking = true;
      setTimeout(() => {
        _this.pickShacking = false;
      }, 1000)
    },

    handleDelModule(index) {
      if (jQuery.isEmptyObject(this.instanceList[index].data)) {
        let that = this;
        $('#module-content-' + index).hide(that.duration, () => {
          that.instanceList.splice(index, 1);
        })
        return 
      }
      let msg = EDIT_LAYOUT_TRANSACTION.DELETE_MODULE;
      let that = this;
      layer.confirm(msg, {title: EDIT_LAYOUT_TRANSACTION.CONFIRM, skin: 'oris-layer', btn: ["{{__('确定(yes)')}}", "{{__('取消(no)')}}"]} ,() => {
        /* $.toast({
          heading: false,
          text: EDIT_LAYOUT_TRANSACTION.DELETE_SUCCESS,
          position: 'top-center',
          showHideTransition: 'fade',
          icon: 'success',
          hideAfter: 5000,
          allowToastClose: false,
          loader: false
        }); */
        that.$message({...ALERT_OPTION, message: EDIT_LAYOUT_TRANSACTION.DELETE_SUCCESS});
        layer.closeAll();
        $('#module-content-' + index).hide(that.duration, () => {
          that.instanceList.splice(index, 1);
        })
      })
    },

    handleEditModule(index) {
      let refName = `module-${index}`;
      this.$refs[refName][0].handleEdit();
    },
    // %module end


    // 获取请求数据
    _getData(type) {
      let data = {
        tab: this.activeTab || 'unpublished',
        type: type,
        modules: [],
      }
      _.map(this.instanceList, function(item) {
        data.modules.push({
          type: item.type,
          data: item.data ? item.data : {}
        })
      })
      return data;
    },


    // 头部操作栏操作部分
    // %header start
    handlePreview() {
      let data = this._getData('preview');
      if (data) {
        PublishHelper.instance('home').publish(data, (preview_key) => {
          let url = `index.php?route=seller_store/home&id=${SELLER.customer_id}&preview_key=${preview_key}`
          window.open(url,'_blank');
        });
      }
    },

    handleSave() {
      let data = this._getData('draft');
      let that = this;
      if (data) {
        PublishHelper.instance('home').publish(data, () => {
          $.toast({
            heading: false,
            text: EDIT_LAYOUT_TRANSACTION.SAVE_SUCCESS,
            position: 'top-center',
            showHideTransition: 'fade',
            icon: 'success',
            hideAfter: 5000,
            allowToastClose: false,
            loader: false
          });
          that.$emit('aftersave');
        });
      }
    },

    handlePublish() {
      let data = this._getData('publish');
      let that = this;
      if (data) {
        PublishHelper.instance('home').publish(data, () => {
          // window.location.reload();
          top.location.href = window.location.href.split('#storetab=')[0] + '#storetab=published';
          top.location.reload();
        },null, (error_modules) => {
          that.instanceList = that.instanceList.filter((item,index) => {
            return !error_modules.includes(index);
          })
          that.$forceUpdate();
        });
      }
    },

    clickTab(tab) {
      if(this.activeTab != tab) {
        let that = this;
        //页面切换动画
        $("#edit-area-container").fadeOut(200, function() {
          $("#edit-area-container").fadeIn(200);
          that.instanceList = [];
            store.dispatch('setActiveTab', tab);
          that.$nextTick(function() {
              that.instanceList = _.cloneDeep(store.state.activeData);
          })
          that.$forceUpdate();
        })
      }
    },
    // %header end

    handlerCancelAudit() {
      let data = {
        id: this.published.audit_info.id
      }
      let that = this;
      PublishHelper.instance('home').cancelAudit(data, (dontSaveDraft)=>{
        //top.location.reload();
        that.$emit('aftersave', dontSaveDraft);
      });
    },

    // 拖动检测，显示对应样式
    handleDragOver(i) {
      this.curDragOverIdx = i;
    },

    handleDragEnd(type) {
      if (type == 'drop') {
        if (this.instanceList.length >= this.limit) {
          /* $.toast({
            heading: false,
            text: EDIT_LAYOUT_TRANSACTION.OVER_LIMIT,
            position: 'top-center',
            showHideTransition: 'fade',
            icon: 'error',
            hideAfter: 2000,
            allowToastClose: false,
            loader: false
          }); */
          this.$message({...ALERT_OPTION, message: EDIT_LAYOUT_TRANSACTION.OVER_LIMIT});
        }
      }
      this.curDragOverIdx = -1;
    },

    // 更新模块标题名称
    updateTitle() {
      let counter = {};
      for(let i = 0; i < this.instanceList.length; i ++ ) {
        let instance = this.instanceList[i];
        if (counter[instance.type]) {
          counter[instance.type] += 1;
          for (let j = 0 ; j < this.instanceList.length; j++) {
            if(this.instanceList[j].title == MODULE_LIST[instance.type].title) {
              this.instanceList[j].title = MODULE_LIST[instance.type].title + ' 1';
            }
          }
        } else {
          counter[instance.type] = 1;
        }
        this.instanceList[i].title = counter[instance.type] > 1 ? MODULE_LIST[instance.type].title + ' ' + counter[instance.type] : MODULE_LIST[instance.type].title;
      }
    }
  }
})
</script>

<script>

var lock = false;
//拖动模块自动滚动页面
$(document).ready(function() {

  var interval;
  $("#edit-area-container").bind("dragover", function(e){
      let clientY = e.originalEvent.clientY;
      if (clientY < 180) {
        if(!lock) {
          interval = setInterval(function(){
            document.getElementById("edit-area-container").scrollTop -= 2
          },5)
          lock = true;
        }
      } else {
        clearInterval(interval)
        lock = false
      }
  })

  $("#edit-area-container").bind("dragleave", function(e){
    clearInterval(interval)
    lock = false;
  })
})
</script>
