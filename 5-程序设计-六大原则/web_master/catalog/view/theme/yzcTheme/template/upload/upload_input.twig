{% macro uploadInput() %}
{% verbatim %}
<script type="text/x-template" id="upload-input-template">
  <div>
    <!--input-->
    <template v-if="showInput">
      <upload-comp
        ref="uploadCmpRef"
        :pre-files="selectedFiles"
        :disabled="true"
        :on-click-input="openDialog"
        v-bind="$attrs">
        <template v-if="$scopedSlots['pic_wrap']" slot="pic_wrap" slot-scope="{file}">
          <slot name="pic_wrap" :file="file"></slot>
        </template>
      </upload-comp>
    </template>
    <!--总弹窗-->
    <el-dialog
      :title="'Select Files : '+ currentDir"
      :visible.sync="dialogShow"
      :close-on-click-modal="false"
      :close-on-press-escape="false"
      width="62%">
      <div style="height: 500px" class="upload_input-dialog">
        <el-container style="height: 500px">
          <!--目录的右键菜单-->
          <div v-show="dirOperateMenuShow" style="position: absolute">
            <!--目录操作弹窗-->
            <el-dialog
              width="30%"
              :title=" 'Please input the '+ dirOperateDialogTitle +' category name' "
              :visible.sync="dirOperateDialogShow"
              :close-on-click-modal="false"
              :close-on-press-escape="false"
              @close="closeDirOperateDialog"
              append-to-body>
              <div style="height: 40px">
                <el-input
                  placeholder="Please input the category name"
                  minlength="1"
                  v-model="dirOperateInputForm.name"
                  :validate-event="false"
                  clearable>
                </el-input>
              </div>
              <span slot="footer" class="dialog-footer">
                  <el-button @click="closeDirOperateDialog">Cancel</el-button>
                  <el-button type="primary" @click="handleDirOperateDialogConfirm">Confirm</el-button>
               </span>
            </el-dialog>
            <!--目录的右键菜单选择-->
            <el-menu
              id="rightClickMenu"
              class="el_right_menu"
              active-text-color="#303133">
              <el-menu-item index="1" class="menuItem">
                <div slot="title" @click="createDirParatactic">Add a paratactic folder</div>
              </el-menu-item>
              <el-menu-item index="2" class="menuItem">
                <div slot="title" @click="createDir">Add a subfolder</div>
              </el-menu-item>
              <el-menu-item index="4" class="menuItem">
                <div slot="title" @click="deleteDir">Delete the folder
                </div>
              </el-menu-item>
            </el-menu>
          </div>
          <!--左侧-->
          <el-aside class="aside-style" style="width: 25%;">
            <el-container>
              <el-header class="aside-header" style="height: 40px;">
                <div>
                  <div style="display: inline-block">
                    <span @click="switchToRootDir" style="cursor:pointer">File Catalogs</span>
                  </div>
                  <div style="display: inline-block">
               <span>
                <el-button
                  style="margin-left: 64px"
                  @click.stop="createDir"
                  type="text">
                 <i class=" el-icon-circle-plus-outline"></i>
                </el-button>
                </span>
                  </div>
                </div>
              </el-header>
              <el-main class="upload_input-aside-category">
                <el-scrollbar style="height: 100%" wrapClass="default-scrollbar__wrap">
                  <el-tree
                    @node-click="onDirNodeClick"
                    @node-contextmenu="onDirNodeRightClick"
                    :data="dirList"
                    :lazy="true"
                    :load="onDirNodeLoad"
                    :expand-on-click-node="false"
                    :filter-node-method="dirNodeFilter"
                    node-key="path"
                    highlight-current
                    empty-text="Empty"
                    ref="dirListTreeRef"/>
                <span class="custom-tree-node" slot-scope="{ node, data }">
                <span>
                <i :class=" node.expanded ? 'el-icon-folder-opened' : 'el-icon-folder' "></i>&nbsp;{{ node.label }}
                </span>
               </span>
                  </el-tree>
                </el-scrollbar>
              </el-main>
              <el-footer style="line-height: 60px;">
                <el-input placeholder="Category Name" v-model="dirSearchInputValue"></el-input>
              </el-footer>
            </el-container>
          </el-aside>
          <!--右侧-->
          <el-container>
            <el-header height="70px">
              <!--上方操作区-->
              <div style="height: 60%;padding-left: 20px;line-height: 42px">
                <el-row>
                  <el-tooltip class="item" effect="dark" content="Parent" placement="top">
                    <el-button size="small" @click="goParentDir" icon="el-icon-back"></el-button>
                  </el-tooltip>
                  <el-tooltip class="item" effect="dark" content="Delete" placement="top">
                    <el-button size="small" type="danger" @click="onFileDeleteClick" icon="el-icon-delete"></el-button>
                  </el-tooltip>
                  <el-upload
                    action="index.php?route=upload/upload_component/upload"
                    multiple
                    name="file"
                    :data="uploadData"
                    :show-file-list="false"
                    :http-request="onHttpUpload"
                    :before-upload="onBeforeUpload"
                    :on-error="onUploadError"
                    :on-success="onUploadSuccess"
                    style="display:inline">
                    <el-tooltip class="item" effect="dark" content="Upload" placement="top">
                      <el-button size="small" type="primary" icon="el-icon-upload"></el-button>
                    </el-tooltip>
                    <span
                      class="el-upload__tip"
                      slot="tip">
                        &nbsp;&nbsp;Images file size cannot exceed {{ MAX_UPLOAD_IMAGE_SIZE }}M, others cannot exceed {{ MAX_UPLOAD_FILE_SIZE }}M!
                     </span>
                  </el-upload>
                  <el-input
                    style="width: 150px;float: right;margin-right: 20px"
                    size="small"
                    suffix-icon="el-icon-search"
                    placeholder="Search filename"
                    v-model="fileSearchInputValue">
                  </el-input>
                </el-row>
              </div>
              <!--全选-->
              <div class="dialog_check_column_style">
                All
                <el-checkbox
                  style="margin-bottom: 2px"
                  @change="onSelectAllChange"
                  key="checkbox-all-select"
                  v-model="isSelectAll">
                </el-checkbox>
                <span style="padding-left: 20px">
                You have selected <span :style="{ color: selectCount > 0 ? 'green' : 'red' }">{{ selectCount }}</span> files
                </span>
              </div>
            </el-header>
            <!--文件展示-->
            <el-main>
              <list-show
                v-loading="showListLoading"
                ref="showListRef"
                :row-number="6"
                :file-list="showList"
                :filter-file="showListFilter"
                v-bind="$attrs"
                @click="onShowListClick"
                @dblclick="onShowListDoubleClick">
              </list-show>
            </el-main>
            <!--底部操作-->
            <el-footer style="text-align: center;padding-top: 15px">
              <el-button size="medium" @click="dialogShow=false">Cancel</el-button>
              <el-button size="medium" type="primary" @click="handlerDialogConfirm">Confirm</el-button>
            </el-footer>
          </el-container>
        </el-container>
      </div>
    </el-dialog>
  </div>
</script>
{% endverbatim %}
{% from 'yzcTheme/template/upload/show_list.twig' import uploadInputList %}
{% from 'yzcTheme/template/upload/upload_base.twig' import uploadInputBase  %}
{{ uploadInputList() }}
{{ uploadInputBase() }}
<script>
  const DIR_OPERATE_ADD = 1; // 新建
  const DIR_OPERATE_DELETE = 3; // 删除

  const MAX_UPLOAD_IMAGE_SIZE = 20; // 最大上传图片大小，单位M
  const MAX_UPLOAD_FILE_SIZE = 50; // 最大上传文件(排除图片)大小，单位M

  const IMAGE_MIME_TYPES = [
    'image/gif', 'image/jpeg', 'image/x-citrix-jpeg', 'image/png',
    'image/x-citrix-png', 'image/x-png'
  ]; // image png gif的mime-types

  Vue.component('upload-input', {
    template: '#upload-input-template',
    data: function () {
      return {
        MAX_UPLOAD_IMAGE_SIZE: MAX_UPLOAD_IMAGE_SIZE,
        MAX_UPLOAD_FILE_SIZE: MAX_UPLOAD_FILE_SIZE,
        axios: null,
        selectedFiles: [], // 最终选中的文件

        dialogShow: false, // 总弹窗的显示隐藏
        dialogShowCached: false, // 总弹窗是否弹出过，初次弹出需要初始化一些数据
        currentDir: '/', // 当前目录
        showList: [], // 展示列表
        showListLoading: false, // 展示列表loading
        selectCount: 0, // 选中的数量
        isSelectAll: false, // 是否全选
        fileSearchInputValue: '', // 文件查询

        dirList: [], // 目录列表
        dirSearchInputValue: null, // 目录列表查询输入框

        dirOperateDialogShow: false, // 目录操作弹窗
        dirOperateDialogTitle: null, // 目录操作弹窗的标题
        dirOperateInputValue: null, // 目录操作的输入框
        dirOperateInputForm: {
          type: '',
          path: '',
          name: '',
        },
        //dirOperateOriginNode: null, // 目录操作前的数据
        dirOperateMenuShow: false, // 目录操作右键菜单
        dirOperateMenuNodeInfo: { // 右键菜单弹出时的选中节点的信息
          data: {},
          node: {},
        },
      };
    },
    props: {
      baseDir: {
        type: String,
        default: ''
      },
      beforeConfirm: {
        type: Function,
        default: function () {

        }
      },
      onConfirm: {
        type: Function,
        default: function () {
        }
      },
      fileList: {
        type: Array,
        default: function () {
          return [];
        }
      },
      fileListSort: {
        type: Function,
        default: null
      },
      showInput: {
        type: Boolean,
        default: true
      },
      onBeforeUpload: {
        type: Function,
        default: function () {
          return true;
        }
      },
      //是否选择后清空
      clearWhenClose: {
        type: Boolean,
        default: false
      }
    },
    mounted: function () {
      let _this = this;
      this.axios = axios.create({
        transformRequest: [function (data, headers) {
          let formData = new FormData;
          if (data instanceof FormData) {
            formData = data;
          } else {
            for (const key of Object.keys(data)) {
              formData.append(key, data[key]);
            }
          }
          if (_this.baseDir && _this.baseDir !== '') {
            formData.append('base_dir', _this.baseDir);
          }
          return formData;
        }]
      });
    },
    computed: {
      uploadData: function () {
        return {
          directory: this.currentDir
        };
      }
    },
    watch: {
      fileList: {
        immediate: true,
        handler: function (fileList) {
          if (this.fileListSort) {
            fileList = this.fileListSort(fileList);
          }
          this.selectedFiles = fileList;
        }
      },
      dirSearchInputValue: function (val) {
        this.$refs.dirListTreeRef.filter(val);
      },
      fileSearchInputValue: function (val) {
        this.$refs.showListRef.filter(val);
      },
      currentDir: function (val) {
        this.fileSearchInputValue = '' // 清除右上角搜索框
        this.$refs.dirListTreeRef.setCurrentKey(val === '/' ? null : val); // 调整目录高亮
        this.showListChange();
      }
    },
    methods: {
      // 打开弹窗
      openDialog() {
        this.dialogShow = true;
        if (!this.dialogShowCached) {
          this.dialogShowCached = true;
          // 首次触发获取一次根目录的数据
          this.showListChange();
        }
      },
      // 关闭弹窗
      closeDialog() {
        this.dialogShow = false;
      },
      // 获取目录
      async getDir(dir) {
        let res = null;
        try {
          res = await this.axios.post('index.php?route=upload/upload_component/getImageBaseDir', {dir: dir});
        } catch (e) {
          console.error(e);
        }
        if (!res || res.status !== 200) {
          this.$message.error('get category failed');
          return [];
        }
        return res['data'];
      },
      // 获取展示的文件
      async showListChange() {
        this.showList = [];
        this.showListLoading = true;
        this.isSelectAll = false;
        this.selectCount = 0;

        let res = null;
        try {
          res = await this.axios.post('index.php?route=upload/upload_component/getListFromBaseDir', {dir: this.currentDir});
        } catch (e) {
          console.error(e);
        }
        if (res && res.status === 200 && res.data.dir === this.currentDir) {
          this.showList = res.data.files;
          this.showListLoading = false;
        }
      },
      // 切换到根目录
      switchToRootDir() {
        this.currentDir = '/';
      },
      // 目录 node 展开时
      async onDirNodeLoad(node, resolve) {
        const dir = node.level === 0 ? '' : node.data.path;
        const data = await this.getDir(dir ? dir : '')
        resolve(data)
      },
      // 目录 node 点击
      onDirNodeClick(data) {
        this.closeRightClickMenu()
        if (data.path) {
          this.currentDir = data.path;
        }
      },
      // 目录过滤
      dirNodeFilter(value, data) {
        if (!value) {
          return true;
        }
        return data.label.toLowerCase().indexOf(value.toLowerCase()) !== -1;
      },
      // 刷新节点
      refreshTreeNode(refs, id) {
        if (!Array.isArray(refs)) {
          refs = [refs];
        }
        let node;
        refs.map((ref) => {
          node = null;
          if (id) {
            node = this.$refs[ref].getNode(id);
          } else {
            node = this.$refs[ref].root;
          }
          node.loaded = false;
          node.expand();
        })
      },
      // 右键操作绑定的事件
      closeRightClickMenu() {
        // 任何点击触发关闭菜单
        this.dirOperateMenuShow = false;
        // 触发后移除该事件
        document.removeEventListener('click', this.closeRightClickMenu);
      },
      // 目录操作右键点击
      onDirNodeRightClick(event, object, node, element) {
        // 重新打开 menu 菜单的
        this.dirOperateMenuShow = false;
        let menu = document.querySelector('#rightClickMenu');
        menu.style.left = event.clientX - 300 + 'px';
        menu.style.top = event.clientY - 130 + 'px';
        document.addEventListener('click', this.closeRightClickMenu);
        this.dirOperateMenuShow = true;
        // 记录当前节点数据
        this.dirOperateMenuNodeInfo.data = object;
        this.dirOperateMenuNodeInfo.node = node;
      },
      // 打开目录操作弹窗
      async openDirOperateDialog(type, path) {
        type = parseInt(type) || DIR_OPERATE_ADD;
        this.dirOperateInputForm.type = type;
        this.dirOperateInputForm.path = path;

        if (type === DIR_OPERATE_ADD) {
          this.dirOperateDialogTitle = 'add';
          this.dirOperateDialogShow = true;
        } else if (type === DIR_OPERATE_DELETE) {
          let deleteDir = path.substring(path.lastIndexOf('/') + 1);
          try {
            const isConfirm = await this.$confirm(`Deleting this folder ${deleteDir} means the subfolders will also be deleted. Do you confirm to delete?`, 'Notice', {
              confirmButtonText: 'Confirm',
              cancelButtonText: 'Cancel',
              type: 'warning'
            })
            if (isConfirm) {
              await this.handleDirOperateDialogConfirm()
            }
          } catch (e) {
            console.log(e)
          }
        }
      },
      // 关闭目录操作弹窗
      closeDirOperateDialog() {
        this.dirOperateInputForm = {
          type: '',
          path: '',
          name: '',
        }
        this.dirOperateMenuNodeInfo = {
          node: {},
          data: {},
        }
        this.dirOperateDialogShow = false;
      },
      // 点击目录操作弹窗时的确认
      async handleDirOperateDialogConfirm() {
        if (this.dirOperateInputForm.type !== DIR_OPERATE_DELETE && !this.dirOperateInputForm.name) {
          // 删除目录需要跳过值的校验
          this.$message.error('Input value can not be left blank.');
          return;
        }
        let res = null;
        try {
          res = await this.axios.post('index.php?route=upload/upload_component/makeDir', this.dirOperateInputForm);
          res = res.data;
        } catch (e) {
          console.log(e);
        }
        if (res.code === 1) {
          this.$message.error(res.msg ? res.msg : 'edit directory failed.');
          return;
        }
        if (res.type && res.msg) {
          this.$message[res.type](res.msg);
        }
        const path = this.dirOperateInputForm.path;
        this.closeDirOperateDialog();
        // 刷新上级节点(刷新所有使用目录的tree)
        this.refreshTreeNode(['dirListTreeRef'], this.dirOperateMenuNodeInfo.node.parent ? this.dirOperateMenuNodeInfo.node.parent.key : '')
        if (path === this.currentDir) {
          await this.showListChange();
        }
        this.dirOperateMenuNodeInfo = {
          node: {},
          data: {},
        }
      },
      // 新建目录
      createDir() {
        let path = '/'
        if (this.dirOperateMenuNodeInfo.data.path) {
          path = this.dirOperateMenuNodeInfo.data.path
        }
        this.openDirOperateDialog(DIR_OPERATE_ADD, path)
      },
      // 新建同级目录
      createDirParatactic() {
        let path = '/'
        if (this.dirOperateMenuNodeInfo.node.parent && this.dirOperateMenuNodeInfo.node.parent.level !== 0) {
          path = this.dirOperateMenuNodeInfo.node.parent.data.path
        }
        this.openDirOperateDialog(DIR_OPERATE_ADD, path)
      },
      // 删除目录
      deleteDir() {
        let path = '';
        if (this.dirOperateMenuNodeInfo.data.path) {
          path = this.dirOperateMenuNodeInfo.data.path
        } else {
          console.error('must select one node');
          return;
        }
        this.openDirOperateDialog(DIR_OPERATE_DELETE, path)
      },
      // 文件列表的过滤
      showListFilter(val, file) {
        if (!val) {
          return true;
        }
        return file.name.toLowerCase().indexOf(val.toLowerCase()) !== -1;
      },
      // 文件列表文件点击
      onShowListClick(file) {
        this.isSelectAll = this.$refs.showListRef.checkAllSelected();
        this.selectCount = this.getCheckedList().length;
      },
      // 文件列表文件双击
      onShowListDoubleClick(file) {
        if (file.type === 'dir') {
          this.currentDir += (this.currentDir === '/') ? file.name : ('/' + file.name);
        }
      },
      // 全选操作触发
      onSelectAllChange(newVal) {
        if (newVal === true) {
          this.$refs.showListRef.selectAll();
        } else {
          this.$refs.showListRef.selectNone();
        }
        this.selectCount = this.getCheckedList().length;
      },
      // 去上级目录
      goParentDir() {
        if (this.currentDir === '/') {
          return;
        }
        const currentDir = this.currentDir.substring(0, this.currentDir.lastIndexOf('/'));
        this.currentDir = currentDir || '/';
      },
      // 删除按钮点击事件
      async onFileDeleteClick() {
        let checkedItem = this.getCheckedList();
        if (checkedItem.length === 0) {
          this.$message.warning('Please select at least one item.');
          return;
        }
        let data = [];
        for (let item of checkedItem) {
          data.push(item.orig_url);
        }
        try {
          const isConfirm = await this.$confirm(`Are you sure you want to delete selected items?`, 'Notice', {
            confirmButtonText: 'Confirm',
            cancelButtonText: 'Cancel',
            type: 'warning'
          })
          if (isConfirm) {
            let res = await this.axios.post('index.php?route=/upload/upload_component/delFiles', {files: data});
            res = res.data;
            const code = parseInt(res.code || 0);
            if (code === 0) {
              this.$message[res.type](res.msg)

              await this.showListChange();
            }
          }
        } catch (e) {
          console.log(e);
        }
      },
      // 上传组件事件
      onHttpUpload(content) {
        let formData = new FormData;
        formData.append('file', content.file);
        formData.append('directory', this.currentDir);
        let config = {'Content-Type': 'multipart/form-data'};
        return this.axios.post('index.php?route=upload/upload_component/upload', formData, config);
      },
      // 上传组件事件
      onBeforeUpload(file) {
        const isLimitedSize = this.checkFileSizeValid(file);
        if (!isLimitedSize) {
          return false;
        }
        // 上传文件类型校验
        /** @see https://www.freeformatter.com/mime-types-list.html */
        const allowMimeTypes = [
          'text/csv', 'application/msword', 'image/gif', 'text/html', 'image/jpeg', 'image/x-citrix-jpeg',
          'application/json', 'audio/mp4', 'video/mpeg', 'application/pdf', 'image/png', 'image/x-citrix-png',
          'image/x-png', 'application/vnd.ms-powerpoint', 'text/plain', 'application/vnd.ms-works',
          'application/zip', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
          'application/vnd.ms-excel', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
        ];
        let checkMimeTypes = allowMimeTypes.indexOf(file.type) !== -1;
        if (!checkMimeTypes) {
          let that = this;
          // 解决多文件上传，多个错误信息重叠问题
          setTimeout(function(){
            that.$notify.error({
              title: 'Error',
              dangerouslyUseHTMLString: true,
              message: `[filename:${file.name}]</br><p>File format error.</p>`,
              duration: 0
            });
          },200)
          return false;
        }
        return true;
      },
      // 校验文件大小
      checkFileSizeValid(file) {
        let ret = true;
        if (
          IMAGE_MIME_TYPES.indexOf(file.type) !== -1
          && (Math.ceil(file.size / 1024 / 1024) > MAX_UPLOAD_IMAGE_SIZE)
        ) {
          this.$notify.error({
            title: 'Error',
            dangerouslyUseHTMLString: true,
            message: `[filename:${file.name}]</br><p>Invalid image size,image size is over ${MAX_UPLOAD_IMAGE_SIZE}M.</p>`,
            duration: 0
          });
          ret = false;
        }
        if (
          IMAGE_MIME_TYPES.indexOf(file.type) === -1
          && (Math.ceil(file.size / 1024 / 1024) > MAX_UPLOAD_FILE_SIZE)
        ) {
          this.$notify.error({
            title: 'Error',
            dangerouslyUseHTMLString: true,
            message: `[filename:${file.name}]</br><p>Invalid file size,file size is over ${MAX_UPLOAD_FILE_SIZE}M.</p>`,
            duration: 0
          });
          ret = false;
        }
        return ret;
      },
      // 上传组件事件
      onUploadError(res) {
        console.log(res);
      },
      // 上传组件事件
      onUploadSuccess(res) {
        let filename = res.config ? res.config.data.getAll('file')[0].name : 'Unknown';
        res = res.data;
        let code = parseInt(res.code || 0);
        if (code === 1) {
          this.$notify.error({
            title: 'Error',
            dangerouslyUseHTMLString: true,
            message: `[filename:${filename}]</br><p>${res['msg']}</p>`,
            duration: 0
          });
          return;
        }
        this.$notify.success({
          title: 'Success',
          dangerouslyUseHTMLString: true,
          message: `<p>${res['msg']}</p>`,
        });
        this.showListChange();
      },
      // 底部确认按钮
      handlerDialogConfirm: function () {
        let checkedItem = this.$refs.showListRef.getChecked(true);
        if (this.$refs.uploadCmpRef) {
          let kidList = [];
          let alreadyShowFile = [];
          let oldFiles = this.getFileList();
          this.dialogShow = false;
          // 这里使用origin url 来判断是否重复
          for (let file of oldFiles) {
            file['orig_url'] && kidList.push(file['orig_url']);
          }
          let files = checkedItem.filter(file => {
            if (kidList.indexOf(file['orig_url']) !== -1) {
              alreadyShowFile.push(file.name);
              return false;
            }
            return true;
          });
          const tempFileList = oldFiles.concat(files);
          const newFileList = this.beforeConfirm(tempFileList);
          this.selectedFiles = newFileList !== undefined ? newFileList : tempFileList;
          if (alreadyShowFile.length > 0) {
            this.$notify.error({
              title: 'Error',
              dangerouslyUseHTMLString: true,
              message: "You have already chosen: <br>" + alreadyShowFile.join('<br>')
            })
          }
        }
        this.$nextTick(() => {
          this.onConfirm(checkedItem);
          if(this.clearWhenClose) {
            this.selectedFiles = [];
            this.$refs.showListRef.selectNone();
          }
        });
      },

      // 以下方法存在被外部调用的情况
      // 获取组件list-show里checked的元素
      getCheckedList() {
        return this.$refs.showListRef.getChecked();
      },
      // 获取选中的文件列表
      getFileList() {
        return this.$refs.uploadCmpRef.getFileList()
      },
      // 刷新文件列表
      refreshFileList() {
        if (this.fileListSort) {
          this.selectedFiles = this.fileListSort(this.fileList);
        }
      }
    }
  });
</script>
<style>
  #header {
    z-index: 300 !important;
  }
  .verify-phone-modal {
    z-index: 19999999 !important;
  }
  .el-header {
    padding: 0;
  }

  .el-dialog__body .upload_input-dialog {
    border-top: 1px solid rgb(238, 238, 238);
    margin: -30px -20px
  }

  .el-dialog__header {
    padding: 20px 20px 10px;
  }


  .aside-style {
    border-right: 2px solid rgb(238, 238, 238);
    overflow: hidden;
  }

  .aside-header {
    text-align: left;
    text-indent: 10px;
    color: black;
    font-weight: bold;
    border-bottom: 1px solid rgb(238, 238, 238);
  }

  .custom-tree-node {
    flex: 1;
    display: flex;
    align-items: center;
    justify-content: space-between;
    font-size: 14px;
    padding-right: 8px;
  }

  .el_right_menu {
    border: 1px solid rgb(238, 238, 238);
    z-index: 3000;
  }

  .dialog_check_column_style {
    padding-left: 20px;
    height: 25px;
    line-height: 25px;
    border-bottom: 1px solid rgb(238, 238, 238);
    border-top: 1px solid rgb(238, 238, 238);
  }

  .el-button + .el-button {
    margin-left: 0;
  }

  .upload_input-aside-category {
    padding: 5px;
    height: 400px;
  }

  .el-scrollbar__wrap.default-scrollbar__wrap {
    overflow-x: auto;
  }

  .el-tree--highlight-current .el-tree-node.is-current > .el-tree-node__content {
    background-color: #409EFF;
    color: #FFF;
  }

  .el-tree-node__content > label.el-checkbox {
    margin-bottom: -2px;
  }

  .form-group .el-input input:not([type=checkbox]):not([type=radio]).el-input__inner {
    background-color: #fff !important;
    height: 40px !important;
    line-height: 40px !important;
  }

  .form-group .el-input--small input:not([type=checkbox]):not([type=radio]).el-input__inner {
    height: 32px !important;
    line-height: 32px !important;
  }
</style>
{% endmacro %}
{% import _self as uploadCmp %}
{{ uploadCmp.uploadInput() }}