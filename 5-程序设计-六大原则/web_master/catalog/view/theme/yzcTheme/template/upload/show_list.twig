{% macro uploadInputList() %}
{% verbatim %}
<script type="text/x-template" id="show_list">
<transition-group name="fade" tag="div">
    <template v-for=" ( files, index) in list ">
      <el-row :key="index" :gutter="gutter" style="margin-top: 10px">
        <template v-for=" (file, index2) in files ">
          <div @click="handlerClick(file,list,index,index2)"  @dblclick="()=>{ $emit('dblclick',file,list,index,index2); }">
            <slot name="file" :file="file">
              <el-col :span="span">
                <el-checkbox
                  :key="renderIndex"
                  :checked="file.checked"
                  class="image-checkbox"
                  @change="handlerClickImage(index, index2)"
                  v-if=" checkIsType(file, ['image','other','pdf','video']) "
                >
                </el-checkbox>
                <div class="show_list-image-wrap-div" >
                  <el-image
                    style="cursor:pointer"
                    :src="file.thumb"
                    fit="contain"
                    @click="handlerClickImage(index, index2)"
                    lazy
                  >
                  </el-image>
                  <div class="show_list-wrap-bottom " v-if=" file.width >= 0 && file.height >= 0">
                    <span>{{ file.width }}px*{{ file.height }}px</span>
                  </div>
                </div>
                <div style="text-align: center;font-size: 12px;line-height: 12px">
                  <el-tooltip class="item" effect="dark" :content="file.name" placement="right-end">
                    <span>{{ file.name.length > 6 ? file.name.substring(0,6)+'...' : file.name }}</span>
                  </el-tooltip>
                </div>
              </el-col>
            </slot>
          </div>
        </template>
      </el-row>
    </template>
 </transition-group>
</script>
{% endverbatim %}
<script>
  Vue.component('list-show', {
    template: '#show_list',
    data: function () {
      return {
        list: [],
        span: null,
        renderIndex: 0,
        tId: null
      };
    },
    props: {
      gutter: {
        type: Number,
        default: 20
      },
      rowNumber: {
        type: Number,
        default: 6
      },
      fileList: {
        type: Array,
        default: function () {
          return [];
        }
      },
      filterFile: {
        type: Function,
        default: function () {
          return true;
        }
      },
      // 默认选择范围为['image']
      selectRange: {
        type: Array,
        default: function () {
          return ['image', 'other', 'video', 'pdf'];
        }
      }
    },
    watch: {
      fileList: {
        immediate: true,
        handler: function () {
          this.filter();
        }
      },
      rowNumber: {
        immediate: true,
        handler: function (rowNumber) {
          this.span = Math.floor(24 / rowNumber);
        }
      }
    },
    methods: {
      // 单击事件 注意 这个自带延迟
      handlerClick: function (file, list, index, index2) {
        let _this = this;
        window.clearTimeout(_this.tId);
        _this.tId = window.setTimeout(function () {
          _this.$emit('click', file, list, index, index2)
        }, 50)
      },
      // 处理列表
      resolveFileList: function (fileList, rowNumber, callback, ...args) {
        let _this = this;
        callback = callback || null;
        let rowCount = Math.ceil(fileList.length / rowNumber);
        let i = 1;
        let list = [];
        // callback 对fileList进行处理 获取到新的fileList
        if (callback && typeof callback === 'function') {
          fileList = fileList.filter(function (file) {
            return callback(...args, file);
          });
        }
        while (i <= rowCount) {
          let temp = [];
          fileList.slice((i - 1) * rowNumber, i * rowNumber).map(function (item) {
            item = _this.resolveItem(item);
            temp.push(item);
          });
          i++;
          list.push(temp);
        }
        return list;
      },
      // 类型 [dir,image,other,video,pdf]
      checkType: function (...args) {
        // 同 upload_base.twig
        args = args.filter(function (item) {
          return item.indexOf('.') !== -1
        }).map(function (item) {
          if (item.indexOf('?') !== -1) {
            // 去除带 ? 的，因为 OSS 以参数形式处理宽高等
            item = item.substring(0, item.indexOf('?'));
          }
          return item.substring(item.lastIndexOf('.') + 1).toLowerCase()
        });
        let suffix = args.pop() || '';
        let type = 'dir';
        if (['jpg', 'png', 'jpeg', 'gif'].indexOf(suffix) > -1) {
          type = 'image';
        } else if (
          [
            'crdownload', 'zip', 'doc', 'text', 'txt',
            'xls', 'docx', 'csv', 'sql', 'php', 'log',
            'exe', 'msi', 'ini', 'html', 'json', 'xlxs', 'xlsx'
          ].indexOf(suffix) > -1) {
          type = 'other';
        } else if (['mp4', 'rmvb'].indexOf(suffix) > -1) {
          type = 'video';
        } else if (['pdf'].indexOf(suffix) > -1) {
          type = 'pdf';
        }
        return type;
      },
      checkIsType: function (file, type) {
        return type.indexOf(file.type) !== -1;
      },
      // 校验是否全部选择 有一个没有选择就返回false；
      checkAllSelected: function () {
        let ret = true;
        let type = ['image', 'other', 'video', 'pdf'];
        for (let items of this.list) {
          for (let item of items) {
            if (type.indexOf(item.type) !== -1 && !item.checked) {
              ret = false;
            }
          }
        }
        return ret;
      },
      resolveItem: function (item) {
        // 同 upload_base.twig
        let _this = this;
        let originUrl = item.orig_url || '';
        if (!originUrl) console.error('invalid orig_url,please check the prop:fileList');
        item.name = item.name || originUrl.substring(originUrl.lastIndexOf('/') + 1);
        // file type check
        item.type = item.type || _this.checkType(originUrl, item.name);
        // if item is image,get height and width of that image from url
        if (item.hasOwnProperty('is_blank') && item['is_blank'] === 1) {
          return item;
        }
        if (item.type === 'image') {
          if (!item.thumb) {
            item.thumb = originUrl;
          }
        } else if (item.type === 'pdf') {
          item.thumb = '{{ asset("image/icons/pdf.png") }}';
        } else if (item.type === 'other') {
          item.thumb = '{{ asset("image/icons/file.png") }}';
        } else if (item.type === 'dir') {
          item.thumb = '{{ asset("image/icons/dir.png") }}';
        } else if (item.type === 'video') {
          item.thumb = '{{ asset("image/icons/video.png") }}';
        }
        return item;
      },
      // 点击图片实现点击checkbox的效果
      handlerClickImage: function (index, index2) {
        let tempArr = this.list[index];
        // if (
        //     this.selectRange.length !== 0
        //     && this.selectRange.indexOf(tempArr[index2].type) === -1
        // ) {
        //     return;
        // }
        tempArr[index2].checked = !tempArr[index2].checked;
        this.$set(this.list, index, tempArr);
        this.renderIndex++;
        return false;
      },
      // 过滤图片 实现搜索功能
      filter: function (val) {
        let _this = this;
        val = val || '';
        _this.list = _this.resolveFileList(this.fileList, this.rowNumber, this.filterFile, val);
        this.renderIndex++;
      },
      // 获取check的元素
      getChecked: function (useSelectRange) {
        useSelectRange = !!useSelectRange;
        let type = !useSelectRange
          ? ['image', 'other', 'video', 'pdf']
          : this.selectRange;
        let ret = [];
        for (let items of this.list) {
          for (let item of items) {
            if (type.indexOf(item.type) !== -1 && item.checked === true) {
              ret.push(this.shallowCopy(item));
            }
          }
        }
        return ret;
      },
      // 全选
      selectAll: function () {
        let type = ['image', 'other', 'video', 'pdf'];
        let list = this.list;
        for (let i in list) {
          for (let j in list[i]) {
            if (type.indexOf(list[i][j].type) !== -1) {
              list[i][j].checked = true;
            }
          }
        }
        this.renderIndex++;
        this.list = list;
      },
      // 全不选
      selectNone: function () {
        let type = ['image', 'other', 'video', 'pdf'];
        let list = this.list;
        for (let i in list) {
          for (let j in list[i]) {
            if (type.indexOf(list[i][j].type) !== -1) {
              list[i][j].checked = false;
            }
          }
        }
        this.renderIndex++;
        this.list = list;
      },
      shallowCopy: function (src) {
        let dst = {};
        for (let prop in src) {
          if (src.hasOwnProperty(prop)) {
            dst[prop] = src[prop];
          }
        }
        return dst;
      }
    }
  })
</script>
<style>
  .show_list-wrap-bottom {
    position: absolute;
    width: 100%;
    text-align: center;
    bottom: 0;
    background: 1px 1px rgba(0, 0, 0, 0.5);
    color: white;
    font-size: 12px;
  }

  .show_list-image-wrap-div>.el-image {
    position: relative;
    border-radius: 6px;
    overflow: hidden;
    border: 1px solid #c0ccda;
    width: 100px;
    height: 100px;
  }

  .show_list-image-wrap-div>.el-image:hover {
    border: 1px solid #409EFF;
  }

  label.image-checkbox {
    position: absolute;
    top: 0;
    line-height: 1;
  }
</style>
{% endmacro %}

{% import _self as uploadCmp %}
{{ uploadCmp.uploadInputList() }}