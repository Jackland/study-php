{# start header column-left #}
{{ header }}{{ separate_column_left }}
{# end header column-left #}

<!-- import CSS -->
<link rel="stylesheet" href="catalog/view/javascript/product/element-ui.css">
<!-- import Vue before Element -->
{# <script src="https://unpkg.com/vue/dist/vue.js"></script>#}
<script src="catalog/view/javascript/product/vue.min.js"></script>
<!-- import JavaScript -->
<script src="catalog/view/javascript/product/element-ui.js"></script>
<script src="catalog/view/javascript/product/element-ui-en.js"></script>
<!-- import axios -->
<script src="catalog/view/javascript/product/axios.min.js"></script>
<style>
  [v-cloak] {
    display: none;
  }
</style>

{% set container_info='class="container"' %}
{% if separate_view is defined and separate_view %}
  {% set container_info='class="container-fluid" id="content" style="margin-left: 15%"' %}
{% endif %}
<div {{ container_info }}>
  <ul class="breadcrumb">
    {% for breadcrumb in breadcrumbs %}
      <li>
        <a href="{{ breadcrumb.href }}">{{ breadcrumb.text }}</a>
      </li>
    {% endfor %}
  </ul>
  {% if product_id %}
    <h1 id="spot_price_title" style="margin-left: 12px">{{ heading_title_edit }}</h1>
  {% else %}
    <h1 id="spot_price_title" style="margin-left: 12px">{{ heading_title_add }}</h1>
  {% endif %}

  <div class="row">{{ column_left }}
    {% if column_left and column_right %}
      {% set class = 'col-sm-6' %}
    {% elseif column_left or column_right %}
      {% set class = 'col-sm-9' %}
    {% else %}
      {% set class = 'col-sm-12' %}
    {% endif %}

    <div id="content" class="{{ class }}">{{ content_top }}
      {% verbatim %}
<!--  vue -->
<div id="box-shadow">
  <div id="app_form" v-cloak>
    <el-form :model="formModel" :rules="formRules" ref="app_form" label-position="top">
      <el-row>
        <el-form-item label="Item Code/MPN" prop="product_name">
          <template v-slot:label>
            Item Code/MPN &nbsp;
          </template>
          <el-col :span="4">
            <el-autocomplete
              v-model="formModel.product_name"
              :disabled=" is_edit_page "
              :fetch-suggestions="queryProduct"
              value-key='mpn'
              @select="querySelect"
              @blur="handlerAutocompleteBlur"
              style="width: 100%">
              <template v-slot:default="{ item }">
                <p v-if=" item.is_quote == 1 " style="color: green">{{ item.mpn }}</p>
                <p v-else>{{ item.mpn }}</p>
              </template>
            </el-autocomplete>
          </el-col>
          <span slot="error" slot-scope="{ error }" style="margin-left: 10px;color: red">{{ error }}</span>
        </el-form-item>
      </el-row>
      <el-form-item>
        <el-row :gutter="10">
          <el-col :span="8"> MPN
            <el-input disabled v-model="product.mpn"></el-input>
          </el-col>
          <el-col :span="8">Item Code
            <el-input disabled v-model="product.sku"></el-input>
          </el-col>
          <el-col :span="8">Current Price
            <el-tooltip
              class="item"
              effect="dark"
              content="The price excluding fulfillment offered by the seller when the quantity of products the buyer purchased has reached the required quantity is for reference only. The bid price shall prevail. "
              placement="top">
              <i class="giga icon-V10-wenhaotishi"></i>
            </el-tooltip>
            <el-input disabled v-model="product.price"></el-input>
          </el-col>
        </el-row>
      </el-form-item>
      <el-form-item style="margin-bottom: 10px">
        <el-row>
          <el-col :span="8">Minimum Selling Quantity</el-col>
          <el-col :span="8">Maximum Selling Quantity</el-col>
          <el-col :span="8">
            Spot Price(Unit)
            <el-tooltip
              class="item"
              effect="dark"
              content="This exclusive price is the price excludes fulfillment. For home pickup buyers, they will directly see this price. For dropshippping buyers, they will see the price added the real-time fulfillment."
              placement="top">
              <i class="giga icon-V10-wenhaotishi"></i>
            </el-tooltip>
          </el-col>
        </el-row>
      </el-form-item>
      <hr style="margin: 0">
      <el-row v-for=" (item,index) in formModel.data " :key="index">
        <el-col :span="8">
          <el-form-item
            style="margin-bottom: 45px"
            :prop=" 'data.'+index+'.min' "
            :rules="[{validator: validateDataMin}]">
            <el-input
              :disabled="(index == 0) ? false : true "
              style="width: 70%"
              class="app_form_input_number"
              :controls="false"
              v-model="item.min">
            </el-input>
          </el-form-item>
        </el-col>
        <el-col :span="8">
          <el-form-item
            style="margin-bottom: 45px"
            :prop=" 'data.'+index+'.max' "
            :rules="[{validator: validateDataMax}]">
            <el-input
              class="app_form_input_number"
              style="width: 70%"
              :controls="false"
              v-model="item.max">
            </el-input>
          </el-form-item>
        </el-col>
        <el-col :span="8">
          <el-form-item
            style="margin-bottom: 45px"
            :prop=" 'data.'+index+'.home_pick_up_price' "
            :rules="[{validator: validateHomePickUpPrice}]">
            <el-input
              class="app_form_input_number"
              style="width: 70%"
              v-model="item.home_pick_up_price">
            </el-input>
            <el-button
              v-if=" formModel.data.length > 3 "
              type="danger"
              @click=" formModel.data.splice(index,1); ">
              <i class="fa fa-trash"></i>
            </el-button>
          </el-form-item>
        </el-col>
      </el-row>
      </el-form-item>
      <el-form-item>
        <el-row style="margin-bottom: 10px">
          <el-col :span="4" :offset="20">
            <el-tooltip
              class="item"
              effect="dark"
              content="Save"
              placement="top">
              <el-button type="primary" @click="handlerClickSave"><i class="fa fa-save"></i></el-button>
            </el-tooltip>
            <el-tooltip
              class="item"
              effect="dark"
              content="Go Back"
              placement="top">
              <el-button @click="handlerClickGoBack"><i class="fa fa-reply"></i></el-button>
            </el-tooltip>
          </el-col>
        </el-row>
      </el-form-item>
    </el-form>
  </div>
</div>

<!-- end vue -->
{% endverbatim %}
    </div>
  </div>
</div>
<script>
  let IS_PICK = {{ is_pickup }};
  let IS_JPY = {{ is_jpy }};
  let is_outer = {{ is_outer }};
  let alarm_price = {{ alarm_price }};
  let PRODUCT_ID = {{ product_id ? : 0 }};
  let alarm_msg = '{{ is_show_cwf_notice ? error_product_price_proportion_cwf : error_product_price_proportion }}';
  let vm = new Vue({
    el: "#app_form",
    data: function () {
      let _this = this;
      let validateProductName = function (rule, value, callback) {
        if (!_this.formModel.product_id && !_this.formModel.product_name) {
          return callback(new Error('Item Code/MPN can not be left blank.'))
        }
        if (_this.formModel.product_name && !_this.formModel.product_id) {
          return callback(new Error('Cannot find the matched item by this MPN or item Code,or has been discarded or cannot be sold separately'));
        }
        callback();
      };
      return {
        is_add: PRODUCT_ID === 0,
        is_edit_page: PRODUCT_ID !== 0,
        is_pick: IS_PICK,
        is_jpy: IS_JPY,
        is_outer: is_outer,
        alarm_price: alarm_price,
        oldProductName: null,
        product: {
          mpn: null,
          sku: null,
          freight: null,
          price: null,
          pick_up_price: null,
        },
        formModel: {
          product_name: null,
          product_id: PRODUCT_ID,
          data: [
            {min: 2, max: null, price: null, pick_up_price: null, home_pick_up_price: null},
            {min: null, max: null, price: null, pick_up_price: null, home_pick_up_price: null},
            {min: null, max: null, price: null, pick_up_price: null, home_pick_up_price: null},
          ]
        },
        formRules: {
          product_name: [{validator: validateProductName, trigger: 'none'}]
        },
        axios: null,
        loading: null
      };
    },
    mounted: function () {
      let _this = this;
      this.axios = axios.create({});
      if (this.is_add === true) return;
      let get_url = 'index.php?route=customerpartner/spot_price/tiered_price/getProductPriceDetail';
      get_url += '&product_id=' + this.formModel.product_id;
      axios.get(get_url).then(function (res) {
        if (typeof res['data'] === 'string') return;
        _this.querySelect(res['data']);
      })
    },
    computed: {
      freight: function () {
        return this.product.freight;
      },
      price: function () {
        return this.product.price;
      }
    },
    watch: {
      freight: function () {
        this.product.pick_up_price = this.computePickUpPrice(this.product.price, this.product.freight);
      },
      price: function () {
        this.product.pick_up_price = this.computePickUpPrice(this.product.price, this.product.freight);
      }
    },
    methods: {
      handlerClickSave: function () {
        let _this = this;
        let form = this.$refs['app_form'];
        if (_this.loading !== null) return;
        form.validate(function (valid) {
          if (!valid) return;
          // 校验价格报警
          let needAlarm = false;
          _this.formModel.data.forEach(function (item) {
            if (item.home_pick_up_price && item.home_pick_up_price < _this.alarm_price) {
              needAlarm = true;
            }
          })
          let layer_alarm_price = needAlarm && _this.is_outer ? layerConfirm : layerConfirmResolve;
          layer_alarm_price(alarm_msg)
            .then(function () {
              layer.closeAll();
              _this.loading = _this.$loading({
                lock: true,
                text: 'Loading',
                spinner: 'el-icon-loading',
                background: 'rgba(0, 0, 0, 0.7)'
              });
              axios.post('index.php?route=customerpartner/spot_price/tiered_price/store', _this.formModel)
                .then(function (res) {
                  let data = res['data'];
                  _this.loading.close();
                  if (parseInt(data) === 1) {
                    _this.$notify.success({
                      title: 'SUCCESS',
                      message: _this.is_add ? 'Add successfully.' : 'Edit successfully.'
                    });
                    if (_this.is_add) window.location.href = 'index.php?route=customerpartner/spot_price/index';
                  } else {
                    _this.$notify.error({
                      title: 'ERROR',
                      message: _this.is_add ? 'Add failed.' : 'Edit failed.'
                    });
                  }
                  _this.loading = null;
                })
                .catch(function (e) {
                  console.error(e);
                })
            })
            .catch(function () {
              layer.closeAll();
            })
        })
      },
      handlerClickGoBack: function () {
        window.location.href = 'index.php?route=customerpartner/spot_price/index';
      },
      handlerAutocompleteBlur: function () {
        let _this = this;
        setTimeout(function () {
          if (!_this.formModel.product_name) {
            _this.initProduct();
            return;
          }
          let get_url = 'index.php?route=customerpartner/spot_price/tiered_price/getProductPriceDetail';
          get_url += '&product_sku=' + _this.formModel.product_name;
          axios.get(get_url).then(function (res) {
            if (typeof res['data'] === 'string') {
              _this.initProduct();
              return;
            }
            _this.querySelect(res['data']);
          })
        }, 200)
      },
      initProduct: function () {
        this.product = {
          mpn: null,
          sku: null,
          freight: null,
          price: null,
          pick_up_price: null
        };
        this.formModel.product_id = null;
        this.formModel.data = [
          {min: 2, max: null, price: null, pick_up_price: null, home_pick_up_price: null},
          {min: null, max: null, price: null, pick_up_price: null, home_pick_up_price: null},
          {min: null, max: null, price: null, pick_up_price: null, home_pick_up_price: null},
        ];
        // 立即显示验证消息
        this.validateProductInfo();
      },
      computePickUpPrice: function (price, freight) {
        price = parseFloat(price || 0);
        freight = parseFloat(isNaN(freight) ? 0 : freight);
        if (price > freight) {
          return this.formatPrice((price - freight).toFixed(2));
        }
        return this.formatPrice(0.00);
      },
      computeDropShipPrice: function (price, freight) {
        price = parseFloat(price || 0);
        freight = parseFloat(isNaN(freight) ? 0 : freight);
        return this.formatPrice((price + freight).toFixed(2));
      },
      formatPrice: function (price) {
        price = Number(price || 0.00);
        return this.is_jpy ? price.toFixed(0) : price.toFixed(2);
      },
      validateDataMin: function (rule, value, callback) {
        let _this = this;
        this.validateProductInfo();
        if (value == null || value === '' || value === undefined) callback();
        let data = _this.formModel.data;
        let field_info = rule['field'];
        let index = parseInt(field_info.split('.')[1]);
        let field = field_info.split('.')[2];
        if (index >= 1) callback();
        if (!_this.isInt(value) && index === 0) {
          callback(new Error('Invalid Integer'));
        }
        if (_this.isInt(value) && !_this.isInt(value, 4)) {
          callback(new Error('Minimum Selling Quantity must be smaller than 9999'));
        }
        if (parseInt(value) < 2 && index === 0) {
          callback(new Error('Minimum Selling Quantity must be greater than or equal to 2'));
        }
        callback();
      },
      validateDataMax: function (rule, value, callback) {
        let _this = this;
        this.validateProductInfo();
        if (value == null || value === '' || value === undefined) callback();
        let data = _this.formModel.data;
        let field_info = rule['field'];
        let index = parseInt(field_info.split('.')[1]);
        let field = field_info.split('.')[2];
        if (!_this.isInt(value)) {
          _this.setDataVal(index + 1, 'min');
          callback(new Error('Invalid Integer'));
        }
        if (!_this.isInt(value, 4)) {
          _this.setDataVal(index + 1, 'min');
          callback(new Error('Maximum Selling Quantity must be smaller than 9999'));
        }
        value = parseInt(value);
        if (value < _this.formModel.data[index]['min']) {
          _this.setDataVal(index + 1, 'min');
          callback(new Error('Maximum Selling Quantity must be equal to or greater than Minimum Selling Quantity'));
        }
        if (index < 2 && !isNaN(value)) {
          _this.setDataVal(index + 1, 'min', value + 1);
        }
        callback();
      },
      validateHomePickUpPrice: function (rule, value, callback) {
        let _this = this;
        this.validateProductInfo();
        let field_info = rule['field'];
        let index = parseInt(field_info.split('.')[1]);
        let field = field_info.split('.')[2];
        if (value == null || value === '' || value === undefined) callback();
        if (_this.is_jpy) {
          if (!_this.isInt(value)) {
            callback(new Error('Spot Price must be an integer and no less than 0.'));
          }
        } else {
          if (!(_this.isInt(value) || _this.isDouble(value))) {
            callback(new Error('Spot Price must be an integer or two decimal places and no less than 0.'));
          }
        }
        if (value !== '' || value !== undefined || value !== null) {
          _this.setDataVal(index, 'price', _this.computeDropShipPrice(value, _this.product.freight));
        }
        callback();
      },
      validateProductInfo: function () {
        let form = this.$refs['app_form'];
        form.validateField('product_name');
      },
      queryProduct: function (query, cb) {
        this.axios.post('index.php?route=customerpartner/spot_price/tiered_price/getProducts', {
          filter_search: query
        }).then(function (res) {
          return cb(res['data']['data']);
        })
      },
      querySelect: function (item) {
        let _this = this;
        this.formModel.product_id = item['product_id'];
        this.formModel.product_name = item['mpn'];
        this.oldProductName = item['mpn'];
        for (let i in item) {
          if (_this.product.hasOwnProperty(i)) {
            _this.product[i] = item[i];
            if (i === 'freight') {
              if (item[i] === null || item[i] === undefined || item[i] === '') {
                _this.product[i] = 'N/A';
              }
            }
            if (i === 'price') {
              _this.product[i] = _this.formatPrice(item[i]);
            }
          }
        }
        _this.alarm_price = item['alarm_price'];
        this.validateProductInfo();
        if (parseInt(item['is_quote']) === 1) {
          $('#spot_price_title').html('Edit Spot Price');
          _this.is_add = false;
        } else {
          $('#spot_price_title').html('Add Spot Price');
          _this.is_add = true;
        }
        if (parseInt(item['is_quote']) === 0 || item['quote_detail'].length === 0) {
          _this.formModel.data = [
            {min: 2, max: null, price: null, pick_up_price: null, home_pick_up_price: null},
            {min: null, max: null, price: null, pick_up_price: null, home_pick_up_price: null},
            {min: null, max: null, price: null, pick_up_price: null, home_pick_up_price: null},
          ];
          return;
        }
        let data = [];
        item['quote_detail'].forEach(function (item) {
          data.push({
            max: item['max'],
            min: item['min'],
            price: _this.formatPrice(item['price']),
            pick_up_price: _this.computePickUpPrice(item['price'], _this.freight),
            home_pick_up_price: _this.formatPrice(item['home_pick_up_price']),
          })
        });
        let len = data.length;
        if (len < 3) {
          for (let i = 0; i < 3 - len; i++) {
            data.push({min: null, max: null, price: null, pick_up_price: null, home_pick_up_price: null});
          }
        }
        _this.formModel.data = data;
      },
      // 校验是否为2位小数
      isDouble: function (val) {
        let reg = /((^[1-9][0-9]*)|^0)(\.[0-9]{1,2})$/;
        return reg.test(String(val));
      },
      // 校验是否为整数
      isInt: function (val, maxlen) {
        let range = '*';
        if (maxlen && (parseInt(maxlen) >= 1)) range = '{0,' + (maxlen - 1) + '}';
        let reg = new RegExp('((^[1-9][0-9]' + range + ')|^0)$');
        return reg.test(String(val));
      },
      setDataVal: function (index, field, val) {
        if (index > 2) return;
        if (val === undefined) val = null;
        this.formModel.data[index][field] = val;
      }
    }
  });
</script>
<style>
  .app_form_input_number .el-input__inner {
    text-align: left;
  }
</style>
{{ footer }}