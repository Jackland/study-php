<script type="text/x-template" id="uploadCardTemp">
  <div>
    <el-upload ref="eluploads" action="action" list-type="picture-card" :before-upload="beforeUpload"
    :on-change="handleChangeFile" :file-list="fileList" :auto-upload="true" :disabled="disabled" :drag="false">
      <i class="el-icon-plus my-plus-icon" @click="clickInput"></i>
      <div slot="file" slot-scope="{file}">
        <img class="el-upload-list__item-thumbnail" :src="file.thumb || file.path || file.url" alt="">
        <slot name="pic_wrap" :file="file">
          <div>
            <el-tooltip v-if="file.name" class="item" effect="dark" :content="file.name" placement="top">
              <span class="wrap_content_top">
                {{ file.name.length > 8 ? file.name.substring(0,8)+'...' : file.name }}
              </span>
            </el-tooltip>
            <span v-if=" file.raw.height > 0 && file.raw.width > 0 " class="wrap_content_bottom">
             {{ file.raw.width }}px*{{ file.raw.height }}px
            </span>
          </div>
        </slot>
        <span class="el-upload-list__item-actions">
        <span v-if="showPreview(file)" class="el-upload-list__item-preview" @click="handlePictureCardPreview(file)">
          <i class="el-icon-zoom-in"></i>
        </span>
        <span v-if="showDownload(file)" class="el-upload-list__item-download" @click="handleDownload(file)">
          <i class="el-icon-download"></i>
        </span>
        <span v-if="showDelete(file)" class="el-upload-list__item-delete" @click="handleRemove(file)">
          <i class="el-icon-delete"></i>
        </span>
      </span>
      </div>
    </el-upload>
    <el-dialog :visible.sync="dialogVisible">
      <img width="100%" :src="dialogImageUrl" alt="">
    </el-dialog>
  </div>
</script>
<script>
Vue.component('upload-card', {
  template: '#uploadCardTemp',
  data: function() {
    return {
      dialogImageUrl: "",
      dialogVisible: false,
      fileList: []
    }
  },
  props: {
    action: {
      type: String,
      default: '#'
    },
    disabled: {
      type: Boolean,
      default: false
    },
    preFiles: {
      type: Array,
      default: function() {
        return [];
      }
    },
    showPreview: {
      type: Function,
      default: function() {
        return true;
      }
    },
    showDownload: {
      type: Function,
      default: function() {
        return true;
      }
    },
    showDelete: {
      type: Function,
      default: function() {
        return true;
      }
    },
    onClickInput: {
      type: Function,
      default: function() {

      }
    },
    onChange: {
      type: Function,
      default: function() {

      }
    },
    beforeUploadBaseDelete: {
      type: Function,
      default: function() {
        return Promise.resolve(true);
      }
    }
  },
  watch: {
    preFiles: {
      immediate: true,
      handler(preFiles) {
        let _this = this;
        this.fileList = preFiles.map((item) => {
          item = _this.resolveItem(item);
          item.raw = _this.shallowCopy(item);
          return item;
        });
      }
    }
  },
  methods: {
    clickInput() {
      // 只有当禁止弹出时候 才会执行on click input动作
      if (this.disabled) {
        this.onClickInput();
      }
    },
    handleRemove(file) {
      let _this = this;
      // before remove
      let pro = _this.beforeUploadBaseDelete(file);
      if (!(pro instanceof Promise)) {
        let resolveInfo = !!pro;
        pro = new Promise(function(resolve, reject) {
          if (resolveInfo) {
            resolve(resolveInfo);
          } else {
            reject(resolveInfo);
          }
        })
      }
      pro.then(function(res) {
        res = !!res;
        if (!res) return;
        let newFileList = [];
        for (let item of _this.fileList) {
          if (file.uid !== item.uid) {
            newFileList.push(item);
          }
        }
        _this.fileList = newFileList;
        _this.onChange(_this.fileList);
      }).catch(function(e) {
        console.log(e);
      })
    },
    handlePictureCardPreview(file) {
      if (this.checkIsType(file, 'image')) {
        this.dialogImageUrl = file.path || file.url || file.thumb;
      } else {
        this.dialogImageUrl = file.orig_url;
      }
      this.$nextTick(() => {
        this.dialogVisible = true;
      })
    },
    handleDownload(file) {
      window.location.href = 'index.php?route=upload/upload_component/download&file=' + file.orig_url;
    },
    handleChangeFile(file) {
      let _this = this;
      if (file.status === 'success') {
        _this.fileList.push(file);
      }
    },
    beforeUpload(file) {
      const isLt2M = file.size / 1024 / 1024 < 4;
      if (!isLt2M) {
        this.$message.error("上传icon大小不能超过 4MB!");
      }
      const isSize = new Promise(function(resolve, reject) {
        let width = 0;
        let height = 0;
        let _URL = window.URL || window.webkitURL;
        let img = new Image();
        img.onload = function() {
          let valid = img.width >= width && img.height >= height;
          file.height = img.height;
          file.width = img.width;
          valid ? resolve() : reject();
        };
        img.src = _URL.createObjectURL(file);
      }).then(
        () => {
          return file;
        },
        () => {
          this.$message.error("上传的icon必须是等于或大于100*100!");
          return Promise.reject();
        }
      );
      return isLt2M && isSize;
    },
    getFileList: function() {
      let _this = this;
      let ret = [];
      this.fileList.map(function(item) {
        let tempItem = _this.shallowCopy(item);
        tempItem.raw = {};
        ret.push(tempItem);
      });
      return ret;
    },
    // 浅拷贝
    shallowCopy: function(src) {
      let dst = {};
      for (let prop in src) {
        if (src.hasOwnProperty(prop)) {
          dst[prop] = src[prop];
        }
      }
      return dst;
    },
    // 类型 [dir,image,other,video,pdf]
    checkType: function(...args) {
      args = args.filter(function(item) {
        return item.indexOf('.') !== -1
      }).map(function(item) {
        if (item.indexOf('?') !== -1) {
          // 去除带 ? 的，因为 OSS 以参数形式处理宽高等
          item = item.substring(0, item.indexOf('?'));
        }
        return item.substring(item.lastIndexOf('.') + 1).toLowerCase()
      });
      let suffix = args.pop() || '';
      return filesSuffixType(suffix);
    },
    checkIsType: function(file, type) {
      return type.indexOf(file.type) !== -1;
    },
    resolveItem: function(item) {
      let _this = this;
      let originUrl = item.orig_url || '';
      if (!originUrl) console.error('invalid orig_url,please check the prop:fileList');
      item.name = item.name || originUrl.substring(originUrl.lastIndexOf('/') + 1);
      // file type check
      item.type = item.type || _this.checkType(originUrl, item.name);
      // if item is image,get height and width of that image from url
      if (item.hasOwnProperty('is_blank') && item['is_blank'] === 1) {
        return item;
      }
      let thumbs = {
        'pdf': '{{ asset("image/icons/pdf.png") }}',
        'other': '{{ asset("image/icons/file.png") }}',
        'dir': '{{ asset("image/icons/dir.png") }}',
        'video': '{{ asset("image/icons/video.png") }}'
      }
      if (item.type === 'image') {
        if (!item.thumb) {
          item.thumb = item.url || originUrl;
        }
      } else {
        item.thumb = thumbs[item.type];
      }
      return item;
    }
  }
});
</script>