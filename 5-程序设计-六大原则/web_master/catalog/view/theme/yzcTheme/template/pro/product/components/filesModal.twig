{% trans_default_category 'catalog/view/theme/yzcTheme/template/pro/product/components/filesModal' %}
{{css(['css/common/element-common.css','static/customerpartner/seller_store/home/components/modules/modules_common.css',
'css/common/common.css','static/seller_product/filesModal.css']) }}
{% include 'yzcTheme/template/pro/product/components/upload-card.twig' %}
{% include 'yzcTheme/template/pro/product/components/filesList.twig' %}
<script type="text/x-template" id="filesModal">
  <div class="files-modal">
    <template v-if="showInput">
      <upload-card ref="uploadCmpRef" :pre-files="selectedFiles" :disabled="true" :on-click-input="openDialog" v-bind="$attrs">
        <template v-if="$scopedSlots['pic_wrap']" slot="pic_wrap" slot-scope="{file}">
          <slot name="pic_wrap" :file="file"></slot>
        </template>
      </upload-card>
    </template>
    <el-dialog class="ele ele-modal" title="{{ __('选择文件') }}" :visible.sync="dialogShow" :close-on-click-modal="false" 
    :close-on-press-escape="false" width="752px">
      <div class="content-container ele ele-form">
        <div class="files-search">
          <el-input type="text" class="pull-right" placeholder="{{ __('搜索文件') }}" v-model="searchValue" clearable 
          @keyup.enter.native="handleSearchKeyup" @clear="refreshAll">
            <i slot="prefix" class="giga icon-V10_sousuotubiao" @click="handleSearchClick"></i>
          </el-input>
        </div>
       <files-list :list-data="filesData" current-tab="all" :files-tab="filesTab" :get-file-type="getFileType" 
            :menus="menusData.all" :key="'all' + key" :search-value="searchValue" @changedListData="changedListData" 
            @intoFolder="intoFolder" @cancelName="cancelName" @uploadFilesClick="uploadFilesClick" 
            @handleNewFolder="handleNewFolder" ></files-list>
      </div>
      <template slot="footer">
        
        <input type="file" ref="filesModalInput" id="filesModalInput" class="files-modal-input" :accept="acceptType" multiple @change="uploadFilesChanged">
        <div class="ele ele-btn ele-btn-group">
          <el-button @click="dialogShow=false">{{ __('取消') }}</el-button>
          <el-button type="primary" @click="handlerDialogConfirm">{{ __('确认') }}</el-button>
        </div>
      </template>
    </el-dialog>
    <el-dialog class="ele ele-modal" title="{{ __('提示') }}" :visible.sync="errorDialogShow" :close-on-click-modal="false" 
    :close-on-press-escape="false" width="480px">
      <div class="error-container">
        <div>
          <i class="giga icon-V10_Sellerhoutai_tishishixin"></i>
          <span>{{ __('部分上传失败') }}</span>
        </div>
        <div v-for="err in errorTips">
          <img :src="getFileType(err.name, false)" alt="">
          <div class="error-name">
            <span>${err.name}</span>
            <span class="text-danger">${err.error}</span>
          </div>
        </div>
      </div>
    </el-dialog>
  </div>
</script>
<script>
const FILE_MIME_TYPE = ['image/jpeg', 'image/png', 'image/x-png', 'image/gif', 'application/msword',
  'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'application/vnd.ms-excel',
  'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', 'application/vnd.ms-powerpoint',
  'application/vnd.openxmlformats-officedocument.presentationml.presentation', 'application/pdf', 'text/plain'
];
const IMAGE_MIME_TYPE = ['image/gif', 'image/jpeg', 'image/png', 'image/x-png'];
const IMAGE_SUFFIX = ['jpg', 'png', 'jpeg', 'gif']; // image后缀
const OTHER_SUFFIX = ['crdownload', 'zip', 'doc', 'text', 'txt', 'xls', 'docx', 'csv', 'sql', 'php', 'log', 'exe',
  'msi', 'ini', 'html', 'json', 'xlxs', 'xlsx'
]; // other后缀
const VIDEO_SUFFIX = ['mp4', 'rmvb']; // video后缀
const PDF_SUFFIX = ['pdf']; // pdf后缀
const filesSuffixType = (suffix) => { // 文件名后缀区分文件类型
  let types = {
    [IMAGE_SUFFIX.indexOf(suffix) > -1]: 'image',
    [OTHER_SUFFIX.indexOf(suffix) > -1]: 'other',
    [VIDEO_SUFFIX.indexOf(suffix) > -1]: 'video',
    [PDF_SUFFIX.indexOf(suffix) > -1]: 'pdf'
  }
  return types['true'] || 'dir';
}

Vue.component('files-modal', {
  template: '#filesModal',
  delimiters: ['${', '}'],
  props: {
    imageMaxSize: { // 图片上传最大尺寸默认20M
      type: Number,
      default: 20 * 1024 * 1024
    },
    fileMaxSize: { // 文件上传最大尺寸，默认50M
      type: Number,
      default: 50 * 1024 * 1024
    },
    showInput: {
      type: Boolean,
      default: true
    },
    beforeConfirm: {
      type: Function,
      default: function() {}
    },
    onConfirm: {
      type: Function,
      default: function() {}
    },
    fileList: {
      type: Array,
      default: function() {
        return [];
      }
    },
    fileListSort: {
      type: Function,
      default: null
    },
    //是否选择后清空
    clearWhenClose: {
      type: Boolean,
      default: false
    }
  },
  data: () => {
    return {
      key: 0, // 更新组件key值
      axios: null,
      dialogShow: false, // 是否显示弹框
      errorDialogShow: false, // 是否显示错误提示弹框
      selectedFiles: [], // 最终选中的文件
      filesTab: 'all', // 弹出框当前tab
      filesData: [],
      imageData: [],
      docsData: [],
      menusData: {
        all: [{ id: 0, name: "{{ __('全部文件') }}" }],
        image: [{ id: 0, name: "{{ __('全部图片') }}" }],
        document: [{ id: 0, name: "{{ __('全部文档') }}" }]
      },
      parentId: 0, // 文件目录
      searchValue: '', // 搜索内容
      acceptType: FILE_MIME_TYPE, // 可接受的上传文件类型
      uploadList: null, // 当前选中要上传的文件个数
      errorTips: [], // 文件上传错误提示内容
    }
  },
  watch: {
    fileList: {
      immediate: true,
      handler: function(fileList) {
        if (this.fileListSort) {
          fileList = this.fileListSort(fileList);
        }
        this.selectedFiles = fileList;
      }
    },
  },
  computed: {},
  created() {
    this.axios = axios.create({});
  },
  methods: {
    // 打开弹窗
    openDialog() {
      this.dialogShow = true;
    },
    // 关闭弹窗
    closeDialog() {
      this.dialogShow = false;
    },
    // 底部确认按钮
    handlerDialogConfirm() {
      let checkedItem = this.getChoosedFiles();
      if (this.$refs.uploadCmpRef) {
        let kidList = [];
        let alreadyShowFile = []; // 重复选择
        let oldFiles = this.$refs.uploadCmpRef.getFileList();
        // 这里使用origin url 来判断是否重复
        for (let file of oldFiles) {
          file['orig_url'] && kidList.push(file['orig_url']);
        }
        let files = checkedItem.filter(file => {
          if (kidList.indexOf(file['orig_url']) !== -1) {
            alreadyShowFile.push(file.name);
            return false;
          }
          return true;
        });
        let tempFileList = oldFiles.concat(files);
        // 回调处理files
        let newFileList = this.beforeConfirm(tempFileList);
        this.selectedFiles = newFileList !== undefined ? newFileList : tempFileList;
        if (alreadyShowFile.length > 0) {
          this.$notify.error({
            title: 'Error',
            dangerouslyUseHTMLString: true,
            message: "{{ __('你已经选中文件：') }} <br>" + alreadyShowFile.join('<br>')
          })
        }
      } else {
        // 处理下文件类型
        checkedItem.map(one => one['type'] = filesSuffixType(one.suffix));
      }
      this.$nextTick(() => {
        this.dialogShow = false;
        this.onConfirm(checkedItem);
        if (this.clearWhenClose) {
          this.selectedFiles = [];
          this.refreshAll();
        }
      });
    },
    // 搜索按钮
    handleSearchClick() {
      this.refreshAll();
    },
    // 搜索按钮触发keyup--enter事件
    handleSearchKeyup(e) {
      if (e.keyCode == 13) {
        this.refreshAll();
      }
    },
    refreshAll() {
      this.filesData.length = 0;
      this.imageData.length = 0;
      this.docsData.length = 0;
      this.key++;
    },
    uploadFilesClick() {
      this.$refs.filesModalInput.dispatchEvent(new MouseEvent('click'))
    },
    // 选中文件
    uploadFilesChanged(el) {
      this.uploadList = this.$refs.filesModalInput.files;
      if (this.uploadList.length === 0) {
        return;
      }
      const loading = this.$loading({
        lock: true,
        text: '',
        spinner: 'el-icon-loading file-upload-loading',
        background: 'rgba(0, 0, 0, 0.5)'
      });
      this.errorTips.length = 0;
      let promiseMap = []; // 文件上传请求数组；方案：单个文件分开上传，所有请求返回统一处理
      for (var i = 0; i < this.uploadList.length; i++) {
        // 首先check文件
        let errMsg = this.checkFileErrorMsg(this.uploadList[i]);
        if (errMsg) {
          this.errorTips.push({
            name: this.uploadList[i].name,
            error: errMsg
          })
        } else {
          // 请求列
          promiseMap.push(this.onHttpUpload(this.uploadList[i]))
        }
      }
      let that = this;
      Promise.all(promiseMap).then(res => {
        res.forEach(one => {
          if (one.data.code !== 200) {
            that.errorTips.push({
              name: one['data']['data']['name'],
              error: one.data.msg
            })
          }
        })
        if (that.errorTips.length > 0) {
          // 展示错误弹框
          that.errorDialogShow = true;
        } else {
          $.toast({
            heading: false,
            text: `{{ __('上传完成, 共:num个文件', {num: "${that.uploadList.length}"}) }}`,
            position: 'top-center',
            showHideTransition: 'fade',
            icon: 'success',
            hideAfter: 3000,
            allowToastClose: false,
            loader: false,
          });
        }
        loading.close();
        that.uploadList.length = 0;
        that.$refs.filesModalInput.value = '';
        // 刷新页面
        that.refreshAll();
      }).catch(error => {
        // 异常
        throw error;
      });
    },
    // 上传请求
    onHttpUpload(file) {
      let formData = new FormData;
      formData.append('file', file);
      formData.append('parent_id', this.menusData.all[this.menusData.all.length - 1].id);
      let config = { 'Content-Type': 'multipart/form-data' };
      return this.axios({
        url: '/index.php?route=account/file_manage/index/upload',
        method: 'post',
        data: formData,
        config: config
      });
    },
    // 校验文件是否合格
    checkFileErrorMsg(file) {
      if (IMAGE_MIME_TYPE.indexOf(file.type) === -1 && FILE_MIME_TYPE.indexOf(file.type) === -1) {
        return `{{ __('文件格式仅限图片jpeg/jpg/png/gif 或者文档doc(x)/xls(x)/ppt(x)/pdf/txt') }}`
      }
      if (IMAGE_MIME_TYPE.indexOf(file.type) !== -1 && (file.size > this.imageMaxSize)) {
        return `{{ __('单个图片文件大小不超过20M') }}`
      }
      if (FILE_MIME_TYPE.indexOf(file.type) !== -1 && (file.size > this.fileMaxSize)) {
        return `{{ __('其他文件不能超过50M') }}`
      }
      return '';
    },
    // 获取文件类型
    getFileType(filename, isType = true) {
      let fileData = filename.match(/((\.jp(e)?g|\.png$|\.gif|\.doc(x)?|\.xls(x)?|\.ppt(x)?|\.pdf|\.txt))$/i)
      let suffix =  fileData ? fileData[0].replace('.', '') : 'file';
      if (!isType) {
        let typeList = {
          [/\.jp(e)?g$/i.test(filename)]: 'public/image/file_manage/img.png',
          [/\.png$/i.test(filename)]: 'public/image/file_manage/img.png',
          [/\.gif$/i.test(filename)]: 'public/image/file_manage/img.png',
          [/\.doc(x)?$/i.test(filename)]: 'public/image/file_manage/word1.png',
          [/\.xls(x)?$/i.test(filename)]: 'public/image/file_manage/xls1.png',
          [/\.ppt(x)?$/i.test(filename)]: 'public/image/file_manage/ppt1.png',
          [/\.pdf$/i.test(filename)]: 'public/image/file_manage/pdf1.png',
          [/\.txt$/i.test(filename)]: 'public/image/file_manage/txt1.png'
        }
        return typeList['true'] || (suffix === 'file'? 'public/image/file_manage/file1.png' : 'public/image/file_manage/other1.png')
      } else {
        return suffix;
      }
    },
    changedListData(type, list) {
      switch (type) {
        case 'all':
          this.filesData = list;
          break;
        case 'image':
          this.imageData = list;
          break;
        case 'document':
          this.docsData = list;
          break;
      }
    },
    // 点击进入文件
    intoFolder(data) {
      this.menusData.all = data;
    },
    // 获取选中数据
    getChoosedFiles() {
      let list;
      switch (this.filesTab) {
        case 'all':
          list = this.filesData;
          break;
        case 'image':
          list = this.imageData;
          break;
        case 'document':
          list = this.docsData;
          break;
      }
      return list.filter(one => { return one.isSelected });
    },
    // 以下方法存在被外部调用的情况
    // 获取选中的文件列表
    getFileList() {
      return this.$refs.uploadCmpRef.getFileList();
    },
    // 刷新文件列表
    refreshFileList() {
      if (this.fileListSort) {
        this.selectedFiles = this.fileListSort(this.fileList);
      }
    },
    handleNewFolder(){
      this.filesData.unshift({
        is_dir: 1,
        name: "",
        path: "",
        size: 0,
        suffix: "",
        time: "",
        is_add: true
      })
    },
    cancelName(index){
      this.filesData.splice(index,1)
    }
  }
})
</script>