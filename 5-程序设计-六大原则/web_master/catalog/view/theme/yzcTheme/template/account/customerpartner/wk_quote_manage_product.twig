{{ header }}
{{ separate_column_left }}

<link href="catalog/view/javascript/bootstrap/css/bootstrap-switch.min.css" type="text/css" rel="stylesheet" media="screen"/>
<link href="admin/view/javascript/jquery/jquery-ui/jquery-ui.css" type="text/css" rel="stylesheet" media="screen"/>
<script src="catalog/view/javascript/bootstrap/js/bootstrap-switch.min.js" type="text/javascript"></script>
<script src="admin/view/javascript/jquery/jquery-ui/jquery-ui.js" type="text/javascript"></script>

<style>
  [v-cloak] {
    display: none;
  }
  .input-text-yellow input {
    background-color: #FFFFF0;
  }
  .form-group-sp {
    width: 30%;
    padding-top: 0;
    padding-bottom: 0;
  }
  .btn-small{
    padding: 1px 5px;
    font-size: 12px;
    line-height: 1.5;
    border-radius: 2px;
  }
</style>

{% if separate_view is defined and separate_view %}
<div class="container-fluid" v-cloak id="app_spot" style="margin-left: 6%">
  {% else %}
  <div class="container" v-cloak id="app_spot">
    {% endif %}
    {% if error_warning %}
      <div class="alert alert-danger"><i class="fa fa-exclamation-circle"></i>{{ error_warning }}</div>
    {% endif %}
    {% if success %}
      <div class="alert alert-success"><i class="fa fa-check-circle"> </i>{{ success }}</div>
    {% endif %}
    <template v-for="(msg) in success_msg">
      <div class="alert alert-success"><i class="fa fa-check-circle"> </i>{! msg !}</div>
    </template>
    <template v-for="(msg) in fail_msg">
      <div class="alert alert-danger"><i class="fa fa-exclamation-circle"> </i>{! msg !}</div>
    </template>
    <template v-for="(msg) in warn_msg">
      <div class="alert alert-warning"><i class="fa fa-exclamation-circle"> </i>{! msg !}</div>
    </template>
    <div class="row">{{ column_left }}
      {% if column_left and column_right %}
        {% set class = 'col-sm-6' %}
      {% elseif column_left or column_right %}
        {% set class = 'col-sm-9' %}
      {% else %}
        {% set class = 'col-sm-12' %}
      {% endif %}
      <div id="content_body" class="{{ class }}">
        <h1>
         &emsp;&emsp;<input type="checkbox" name="quote_switch" checked>
          <div class="pull-right" id="form_button" v-show="isClosed == 0">
            <button @click="clickSubmit(1)" data-toggle="tooltip"
                    class="btn btn-primary"><i class="fa fa-save"></i></button>
            <a href="{{ cancel }}" data-toggle="tooltip" title="{{ button_cancel }}" class="btn btn-default"><i
                class="fa fa-reply"></i></a>
          </div>
        </h1>
        <fieldset id="form_content" v-show="isClosed == 0">
          <legend>
            {#<i class="fa fa-list"></i>{{ manage_heading_title }}#}
          </legend>
          <form action="{{ action }}" method="post" enctype="multipart/form-data" id="form-quote"
                class="form-horizontal">
            <template v-if="quoteAllowConfig.allowed_add">
              <div class="form-group">
                <label class="col-sm-2 control-label" for="input-quote">{{ column_add_product }}</label>
                <div class="col-sm-9">
                  <input
                    type="text"
                    name="quote"
                    v-model="quote"
                    placeholder="{{ text_addproduct }}"
                    id="input-quote"
                    class="form-control"/>
                  <div id="product-quote" class="well well-sm" style="height: 150px; overflow: auto;">
                    <template v-for="(item,index) in products">
                      <div :class=" index%2==0 ? 'odd' : 'even'" style="height: auto;margin-top: 5px">
                        <p style="display: inline;">
                          <i class="fa fa-minus-circle" @click="removeSelect(item)"></i>
                          <a style="color: inherit" target="_blank" :href="computeProductUrl(item)">{!
                            computeProductName(item) !}</a>
                        </p>
                        <button
                          type="button"
                          class="btn btn-small"
                          :class="checkInputQuoteError(item) ? 'btn-danger' : 'btn-primary'"
                          style="display: none;"
                          @click="clickSetting(item)"
                        >Setting
                        </button>
                      </div>
                    </template>
                  </div>
                </div>
                <tempalate v-if="input_quote_error && input_quote_error.length > 0">
                  <div class="col-sm-9 help-block" style="margin-top: -15px">
                    <template v-for="item in input_quote_error">
                      <div style="margin-left: 23%;color: red"><i class="fa fa-exclamation-circle"> </i>{! item !}</div>
                    </template>
                  </div>
                </tempalate>
              </div>
              <div class="form-group">
                <label class="col-sm-2 control-label" for="input-product-status">
                  <span data-toggle="tooltip" title="{{ text_product_status_info }}">{{ text_product_status }}<i class="giga icon-V10-wenhaotishi"></i></span>
                </label>
                <div class="col-sm-9">
                  <select name="product_status" id="input-product-status" v-model="productStatus" class="form-control">
                    <option value="1">{{ text_enabled }}</option>
                    <option value="0">{{ text_disabled }}</option>
                  </select>
                </div>
              </div>
            </template>
            <template v-if="quoteAllowConfig.allowed_quantity">
              <div class="form-group">
                <label class="col-sm-2 control-label" for="input-quantity">{{ text_addquantity }}</label>
                <div class="col-sm-9">
                  <input
                    type="number"
                    name="quantity"
                    placeholder="{{ text_addquantity }}"
                    id="input-quantity"
                    v-model="min_quantity"
                    min="0"
                    class="form-control"/>
                </div>
              </div>
            </template>
          </form>
        </fieldset>

        <div class="container-fluid" id="layer-open-setting" style="display:none;margin-top: 10px">
          <template v-for="(item,index) in layer_warning">
            <div class="alert alert-danger alert-dismissible"><i class="fa fa-exclamation-circle"></i> {! item !}
              <button type="button" class="close" @click="removeWarning(index)">&times;</button>
            </div>
          </template>
          <template v-if="layer_sp_warning_switch">
            <template v-for="(item,index) in layer_sp_warning">
              <div class="alert alert-warning alert-dismissible"><i class="fa fa-exclamation-circle"></i> {! item !}
                <button type="button" class="close" @click="removeSpWarning(index)">&times;</button>
              </div>
            </template>
          </template>
          <div class="panel panel-default">
            <div class="panel-heading">
              <h3 class="panel-title"><i class="fa fa-list"></i> {! computeLayerTitle() !} </h3>
            </div>
            <div class="panel-body">
              <div class="table-responsive">
                <table class="table table-hover">
                  <thead>
                  <tr>
                    <td class="text-center">Quantity Range</td>
                    <td class="text-center"> Unit Price</td>
                    <td class="text-center">Status</td>
                    <td></td>
                  </tr>
                  </thead>
                  <tbody>
                  <tr v-for="(item,index) in layer_setting">
                    <td class="text-center">
                      <div class="form-inline">
                        <div
                          class="form-group form-group-sp"
                          :class=" layer_warning_info[index].min_quantity_warning ? 'has-error input-text-yellow' : '' ">
                          <label for="min_quantity"> Min</label>
                          <input style="width: 75%" class="form-control " type="number" name="min_quantity"
                                 v-enter-number
                                 v-model="layer_setting[index].min_quantity"/>
                        </div>
                        <div
                          class="form-group form-group-sp"
                          :class=" layer_warning_info[index].max_quantity_warning ? 'has-error input-text-yellow' : '' ">
                          <label for="max_quantity"> Max</label>
                          <input style="width: 75%" class="form-control " type="number" name="max_quantity"
                                 v-enter-number
                                 v-model="layer_setting[index].max_quantity"/>
                        </div>
                      </div>
                    </td>
                    <td class="text-center">
                      <div :class=" layer_warning_info[index].price_warning ? 'has-error input-text-yellow' : '' ">
                        <template v-if="!isJapan">
                          <input type="text" class="form-control" style="display:inline-block;width: 50%"
                                 v-model="layer_setting[index].price"/> {{ money_currency }}/piece
                        </template>
                        <template v-if="isJapan">
                          <input type="text" class="form-control" style="display:inline-block;width: 50%"
                                 v-model="layer_setting[index].price"/> {{ money_currency }}/piece
                        </template>
                      </div>
                    </td>
                    <td class="text-center">
                      <span v-if="layer_warning_info[index].is_valid == false" style="color: red;">Invalid</span>
                      <span v-if="layer_warning_info[index].is_valid == true" style="color: green;">Valid</span>
                    </td>
                    <td class="text-center">
                      <i class="fa fa-minus-circle " style="color: red;cursor: pointer" @click="removeTableRow(index)"></i>
                    </td>
                  </tr>
                  </tbody>
                </table>
              </div>
              <div class="row">
                <div class="col-sm-6 text-left">
                  <i class="fa fa-plus-circle" style="color: blue;cursor: pointer" @click="addTableRow()"> Add new quantity range</i>
                </div>
              </div>
              <div class="row">
                <div class="text-center">
                  <button class="btn btn-warning" @click="clickCloseLayer" title="back"><i class="fa fa-reply"></i>
                  </button>
                  <button class="btn btn-primary" @click="clickSaveLayerSetting" title="submit">Submit</button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  <script type="text/javascript">
    Vue.directive('enterNumber', {
      inserted: function (el) {
        el.addEventListener("keypress", function (e) {
          e = e || window.event;
          let charcode = typeof e.charCode == 'number' ? e.charCode : e.keyCode;
          let re = /\d/;
          if (!re.test(String.fromCharCode(charcode)) && charcode > 9 && !e.ctrlKey) {
            if (e.preventDefault) {
              e.preventDefault();
            } else {
              e.returnValue = false;
            }
          }
          if (el.value.length > 4) {
            e.preventDefault();
          }
        });
      }
    });
    //只能输入正整数及小数 包含小数点 2 位
    Vue.directive('enterNumber2', {
      inserted: function (el) {
        el.addEventListener("keypress", function (e) {
          e = e || window.event;
          let charcode = typeof e.charCode == 'number' ? e.charCode : e.keyCode;
          let re = /\d/;
          if (charcode == 46) {
            if (!el.value) {
              e.preventDefault();
            }
            if (el.value.includes('.')) {
              e.preventDefault();
            }
            return;
          } else if (!re.test(String.fromCharCode(charcode)) && charcode > 9 && !e.ctrlKey) {
            if (e.preventDefault) {
              e.preventDefault();
            } else {
              e.returnValue = false;
            }
          }
          let tVal = el.value;
          if (tVal.length > 0 && (-1 != tVal.indexOf('.')) && tVal.substring(tVal.indexOf('.') + 1).length == 2) {
            e.preventDefault();
          }
        });
      }
    });
    let isJapan = '{{ isJapan }}';
    let vm = new Vue({
      delimiters: ['{!', '!}'],
      el: '#app_spot',
      data: function () {
        return {
          // 是否属于日元区
          isJapan: isJapan == 1,
          // switch state
          isClosed: {{ isClosed }},

          products: [],
          min_quantity: 0,
          productStatus: 0,
          quoteAllowConfig: [],
          quote: '',
          // 页面提示
          success_msg: [],
          fail_msg: [],
          warn_msg: [],
          input_quote_error: [],
          input_quote_error_product_ids: [],
          // 下面的主要是处理弹框
          // 弹框warning：
          hasClickSaveSetting: false,
          layer_warning_switch: false,
          layer_warning: [],
          layer_sp_warning_switch: false,
          layer_sp_warning: [],
          // 弹框属于商品记录
          layer_product: null,
          layer_setting: [
            {min_quantity: '', max_quantity: '', price: ''}
          ],
          // warning详情
          layer_warning_info: [
            {is_valid: false, min_quantity_warning: true, max_quantity_warning: true, price_warning: true}
          ],
          // 存储product对应的设置 键为product_{product_id}
          layer_save_settings: {}
        };
      },
      mounted: function () {
        this.initVue();
      },
      updated: function () {
        let _this = this;
        _this.initBootstrapSwitch();
        // auto complete must init first
        $('input[name=\'quote\']').autocomplete();

      },
      methods: {
        initVue: function () {
          let _this = this;
          $.post('{{ info_get_action }}', function (data) {
            _this.products = data['products'];
            _this.min_quantity = data['quantity'];
            _this.productStatus = data['product_status'];
            _this.quoteAllowConfig = data['product_quote_allowd'];
            _this.layer_save_settings = data['settings'] ? JSON.parse(data['settings']) : {};
          });
        },
        initBootstrapSwitch: function () {
          // 防止重复渲染swicth
          if ($('.bootstrap-switch-container').length > 0) {
            return false;
          }
          let _this = this;
          let quote_switch = $("[name='quote_switch']");
          quote_switch.bootstrapSwitch({state: !this.isClosed});
          quote_switch.on('switchChange.bootstrapSwitch', function (e, state) {
            if (_this.isClosed) {
              _this.isClosed = 0;
              return false;
            } else {
              $(this).bootstrapSwitch('state', !state, true);
              layer.confirm('{{ switch_confirm }}', {
                title: 'message',
                btn: ['yes', 'no']
              }, function () {
                layer.closeAll();
                $.ajax({
                  url: 'index.php?route=account/customerpartner/wk_quote_manage_product/closeQuote',
                  dataType: 'json',
                  success: function (res) {
                    if (res.code == 1) {
                      window.location.href = window.location.href;
                    }
                  }
                })
              }, function () {
                layer.closeAll();
                return false;
              });
            }
          });
        },
        // 异步更新products数据
        refreshProducts: function () {
          let _this = this;
          let products = _this.products;
          if (products.length == 0) {
            return;
          }
          let productIds = [];
          for (let i = 0; i < products.length; i++) {
            productIds.push(products[i]['product_id']);
          }
          $.ajax({
            url: '{{ info_get_action_ids }}',
            dataType: 'json',
            async: false,
            data: {ids: productIds},
            method: 'POST',
            success: function (data) {
              let tempProducts = [];
              for (let i = 0; i < products.length; i++) {
                let productId = products[i]['product_id'];
                let productKey = 'product_' + productId;
                if (data[productKey]) {
                  tempProducts.push(data[productKey]);
                } else {
                  tempProducts.push(products[i]);
                }
              }
              _this.products = tempProducts;
              _this.$forceUpdate();
            }
          });
        },
        computeProductName: function (item) {
          return ' ItemCode:' + item['sku'] + ' -- MPN:' + item['mpn'] + ' -- Name:' + item['name'];
        },
        computeProductUrl: function (item) {
          return 'index.php?route=product/product&product_id=' + item['product_id'];
        },
        removeSelect: function (product) {
          let _this = this;
          let products = _this.products;
          let newProducts = [];
          let layerSettings = _this.layer_save_settings;
          let newSettings = [];

          for (let i = 0; i < products.length; i++) {
            if (product['product_id'] != products[i]['product_id']) {
              newProducts.push(products[i]);
            }
          }
          _this.products = newProducts;
          // 移除保存的layer_setting
          let productKey = 'product_' + product['product_id'];
          for (let key in layerSettings) {
            if (key !== productKey) {
              newSettings[key] = layerSettings[key];
            }
          }
          _this.layer_save_settings = newSettings;
        },
        // 初始化layersetting值
        initLayerSetting: function () {
          this.layer_setting = [];
        },
        // 弹出layer层时初始化
        initLayerWarningInfo: function (length) {
          length = length || 1;
          this.layer_warning_info = [];
          for (let i = 0; i < length; i++) {
            this.layer_warning_info.push({
              is_valid: true,
              min_quantity_warning: false,
              max_quantity_warning: false,
              price_warning: false
            });
          }
        },
        // 移除warning
        removeWarning: function (index) {
          let _this = this;
          let warning = _this.layer_warning;
          let newWarning = [];
          for (let i = 0; i < warning.length; i++) {
            if (i != index) {
              newWarning.push(warning[i]);
            }
          }
          _this.layer_warning = newWarning;
        },
        // 移除spwarning
        removeSpWarning: function (index) {
          let _this = this;
          let warning = _this.layer_sp_warning;
          let newWarning = [];
          for (let i = 0; i < warning.length; i++) {
            if (i != index) {
              newWarning.push(warning[i]);
            }
          }
          _this.layer_sp_warning = newWarning;
        },
        // layer中标题
        computeLayerTitle: function () {
          let product = this.layer_product;
          let _layer_title = '';
          if (!product) {
            return _layer_title;
          }
          if (product['mpn']) {
            _layer_title += 'MPN: ' + product['mpn'];
          }
          if (product['sku']) {
            _layer_title += ' (Item Code: ' + product['sku'] + ')';
          }
          return _layer_title;
        },
        // layer 点击+ 添加一行
        addTableRow: function () {
          this.layer_setting.push({min_quantity: '', max_quantity: '', price: ''});
          this.layer_warning_info.push({
            is_valid: false,
            min_quantity_warning: true,
            max_quantity_warning: true,
            price_warning: true
          });
        },
        // layer 点击- 减少一行
        removeTableRow: function (index) {
          let _this = this;
          let setting = _this.layer_setting;
          let warning = _this.layer_warning_info;
          let newSetting = [];
          let newWarning = [];
          for (let i = 0; i < setting.length; i++) {
            if (i !== parseInt(index)) {
              newSetting.push(setting[i]);
              newWarning.push(warning[i]);
            }
          }
          _this.layer_setting = newSetting;
          _this.layer_warning_info = newWarning;
        },
        // 点击setting弹出layer
        clickSetting: function (product) {
          let _this = this;
          let productKey = 'product_' + product['product_id'];
          if (_this.layer_save_settings[productKey]) {
            _this.layer_setting = this.layer_save_settings[productKey];
          } else {
            _this.initLayerSetting();
          }
          _this.initLayerWarningInfo(_this.layer_setting.length);
          _this.layer_product = product;
          _this.checkLayerSetting();
          // 弹出layer
          layer.open({
            type: 1,
            title: 'Price Range Settings',
            closeBtn: 1,
            skin: 'yzc_layer',
            shadeClose: true,
            area: ['80%', '60%'],
            offset: 'auto',
            maxWidth: 1300,
            maxHeight: 800,
            content: $("#layer-open-setting"),
            success: function () {
              _this.clearInputQuoteError();
            },
            end: function () {
              _this.layer_warning = [];
              _this.layer_sp_warning = [];
              _this.layer_warning_switch = false;
              _this.layer_sp_warning_switch = false;
              _this.hasClickSaveSetting = false;
            }
          });
        },
        clickSaveLayerSetting: function () {
          let _this = this;
          let product = _this.layer_product;
          let productKey = 'product_' + product['product_id'];
          let layer_setting = _this.layer_setting;
          let layer_warning_info = _this.layer_warning_info;
          _this.hasClickSaveSetting = true;
          _this.checkLayerSetting();
          // 如果有invalid的数据 默认保存失败
          for (let i = 0; i < layer_setting.length; i++) {
            if (!layer_warning_info[i]['is_valid']) {
              _this.layer_warning_switch = true;
              return;
            }
          }
          _this.layer_save_settings[productKey] = layer_setting;
          // 写入成功信息
          _this.clearMsg();
          _this.success_msg = ['You have successfully set product\'s price range.'];
          // 关闭layer
          layer.closeAll();
        },
        // 关闭layer
        clickCloseLayer: function () {
          layer.closeAll();
        },
        clickQuote: function () {
          let _this = this;
          $.ajax({
              url: 'index.php?route=customerpartner/autocomplete/productInfo&filter_name=' + encodeURIComponent(_this.quote),
              dataType: 'json',
              async: false,
              success: function (json) {
                let res = $.map(json, function (item) {
                  return {
                    label: 'ItemCode:' + item['sku'] + ' -- MPN:' + item['mpn'] + ' -- Name:' + item['name'],
                    value: item['product_id'],
                    data: item
                  }
                });
                $('input[name=\'quote\']').autocomplete({
                  source: res,
                  select: function (event, item) {
                    let product = item.item.data;
                    let products = _this.products;
                    let productExistFlag = false;
                    for (let i = 0; i < products.length; i++) {
                      if (products[i]['product_id'] == product['product_id']) {
                        productExistFlag = true;
                      }
                    }
                    if (!productExistFlag) {
                      _this.products.push(product);
                    }
                    $('input[name=\'quote\']').val('');
                    return false;
                  }
                });
              }
            }
          )
        },
        clickSubmit: function (tryCounts) {
          tryCounts = tryCounts || 1;
          tryCounts = parseInt(tryCounts);
          let _this = this;
          let errorMsg = '%s has invalid settings !';
          _this.clearMsg();
          _this.clearInputQuoteError();
          let products = _this.products;
          let layerSettings = _this.layer_save_settings;
          let productIds = [];
          let newSettings = {};
          for (let i = 0; i < products.length; i++) {
            let product = products[i];
            let productId = product['product_id'];
            let productKey = 'product_' + productId;
            productIds.push(productId);
            if (layerSettings[productKey]) {
              // 校验layerSettings是否有效
              if (!_this.checkSubmitSettings(product, layerSettings[productKey])) {
                let productName = '';
                if (product['mpn']) {
                  productName += 'MPN: ' + product['mpn'];
                }
                if (product['sku']) {
                  productName += ' (Item Code: ' + product['sku'] + ')';
                }
                //加入错误信息
                _this.input_quote_error.push(_this.sprintf(errorMsg, 'Product[' + productName + ']'))
                _this.input_quote_error_product_ids.push(product['product_id']);
              }
              newSettings[productKey] = layerSettings[productKey];
            }
          }
          if (_this.input_quote_error.length > 0) {
            return;
          }
          let params = {
            ids: productIds,
            settings: newSettings,
            status: _this.productStatus,
            min_quantity: _this.min_quantity
          };
          layer.load();
          $.post('{{ post_action }}', params, function (data) {
            layer.closeAll();
            if (parseInt(data['code']) === 0) {
              _this.success_msg.push(data.message);
            } else {
              if (tryCounts >= 3) {
                layer.closeAll();
                window.location.reload(true);
                return;
              }
              _this.refreshProducts();
              _this.clickSubmit(tryCounts + 1);
            }
          })
        },
        checkSubmitSettings: function (product, settings) {
          let _this = this;
          let newSettings = settings;
          for (let i = 0; i < newSettings.length; i++) {
            let quantityWarningFlag = false;
            let maxQuantityWarningFlag = false;
            let priceWarningFlag = false;
            let setting = newSettings[i];
            let quantity = setting['min_quantity'];
            let maxQuantity = setting['max_quantity'];
            let price = setting['price'];
            if (!quantity) {
              quantityWarningFlag = true;
            }
            if (!maxQuantity) {
              maxQuantityWarningFlag = true;
            }
            if (!price) {
              priceWarningFlag = true;
            }
            if (price) {
              if (product && parseFloat(price) >= parseFloat(product['price'])) {
                priceWarningFlag = true;
              }
              // 首先确保所设置的价格全部不一样
              for (let j = i + 1; j < newSettings.length; j++) {
                if (newSettings[j]['price'] && newSettings[j]['price'] == price) {
                  priceWarningFlag = true;
                }
              }
              let integerReg = new RegExp("^[1-9][0-9]*$");
              let normalReg = new RegExp("^[0-9]+([.]{1}[0-9]{1,2})?$");
              if (_this.isJapan) {
                if (!integerReg.exec(price)) {
                  priceWarningFlag = true;
                }
              } else {
                if (!(integerReg.exec(price) || normalReg.exec(price))) {
                  priceWarningFlag = true;
                }
              }
            }
            if (quantity && quantity < 2) {
              quantityWarningFlag = true;
            }
            if (quantity && maxQuantity) {
              quantity = parseInt(quantity);
              maxQuantity = parseInt(maxQuantity);
              if (quantity > maxQuantity) {
                quantityWarningFlag = true;
                maxQuantityWarningFlag = true;
              }
              for (let j = i + 1; j < newSettings.length; j++) {
                let tempSetting = newSettings[j];
                if (!tempSetting['min_quantity'] || !tempSetting['max_quantity']) {
                  continue;
                }
                let nextMinQuantity = parseInt(tempSetting['min_quantity']);
                let nextMaxQuantity = parseInt(tempSetting['max_quantity']);
                // 查看交集
                if (nextMinQuantity > maxQuantity || nextMaxQuantity < quantity) {
                  continue;
                }
                quantityWarningFlag = true;
                maxQuantityWarningFlag = true;
              }
            }
            if (quantityWarningFlag || maxQuantityWarningFlag || priceWarningFlag) {
              return false;
            }
          }
          return true;
        },
        checkLayerSetting: function (newVal, oldVal) {
          let _this = this;
          _this.layer_warning = [];
          _this.layer_sp_warning = [];
          let emptyMsg = '%s can not be left blank.';
          let greaterThan2Msg = 'The minimum quantity must greater than or equal to 2!';
          let maxGreaterThanMinMsg = 'The maximum quantity cannot be less than the minimum quantity!';
          let maxEqualMinMsg = 'The maximum quantity is not recommended to be the same as the minimum quantity!';
          let priceInvalidMsg = 'The price you have entered is invalid!';
          let priceSameMsg = 'The price you have entered is the same price！';
          let quantityMsg = 'Quantity (%s) has an intersection with quantity (%s) !';
          let basePriceMsg = 'The price cannot be higher than the base price！%s';
          let newSettings = _this.layer_setting;
          let product = _this.layer_product;
          for (let i = 0; i < newSettings.length; i++) {
            let quantityWarningFlag = false;
            let maxQuantityWarningFlag = false;
            let priceWarningFlag = false;
            let setting = newSettings[i];
            let quantity = setting['min_quantity'];
            let maxQuantity = setting['max_quantity'];
            let price = setting['price'];
            if (!quantity) {
              _this.layer_warning.push(_this.sprintf(emptyMsg, 'minimum quantity', i));
              quantityWarningFlag = true;
            }
            if (!maxQuantity) {
              _this.layer_warning.push(_this.sprintf(emptyMsg, 'maximum quantity', i));
              maxQuantityWarningFlag = true;
            }
            if (!price) {
              _this.layer_warning.push(_this.sprintf(emptyMsg, 'price', i));
              priceWarningFlag = true;
            }
            if (price) {
              if (product && parseFloat(price) >= parseFloat(product['price'])) {
                _this.layer_warning.push(_this.sprintf(basePriceMsg, 'your base price: ' + _this.sprintf('{{ money_currency_format }}', product['price'])));
                priceWarningFlag = true;
              }
              // 首先确保所设置的价格全部不一样
              for (let j = i + 1; j < newSettings.length; j++) {
                if (newSettings[j]['price'] && newSettings[j]['price'] == price) {
                  _this.layer_warning.push(_this.sprintf(priceSameMsg, j, i));
                  priceWarningFlag = true;
                }
              }
              let integerReg = new RegExp("^[1-9][0-9]*$");
              let normalReg = new RegExp("^[0-9]+([.]{1}[0-9]{1,2})?$");
              if (_this.isJapan) {
                // 日语只能输入整数
                if (!integerReg.exec(price)) {
                  _this.layer_warning.push(_this.sprintf(priceInvalidMsg, i));
                  priceWarningFlag = true;
                }
              } else {
                if (!(integerReg.exec(price) || normalReg.exec(price))) {
                  _this.layer_warning.push(_this.sprintf(priceInvalidMsg, i));
                  priceWarningFlag = true;
                }
              }
            }
            if (quantity && quantity < 2) {
              _this.layer_warning.push(_this.sprintf(greaterThan2Msg, i));
              quantityWarningFlag = true;
            }
            if (quantity && maxQuantity) {
              quantity = parseInt(quantity);
              maxQuantity = parseInt(maxQuantity);
              if (quantity == maxQuantity) {
                _this.layer_sp_warning.push(maxEqualMinMsg);
              }
              if (quantity > maxQuantity) {
                _this.layer_warning.push(_this.sprintf(maxGreaterThanMinMsg, i));
                quantityWarningFlag = true;
                maxQuantityWarningFlag = true;
              }
              for (let j = i + 1; j < newSettings.length; j++) {
                let tempSetting = newSettings[j];
                if (!tempSetting['min_quantity'] || !tempSetting['max_quantity']) {
                  continue;
                }
                let nextMinQuantity = parseInt(tempSetting['min_quantity']);
                let nextMaxQuantity = parseInt(tempSetting['max_quantity']);
                // 查看交集
                if (nextMinQuantity > maxQuantity || nextMaxQuantity < quantity) {
                  continue;
                }
                _this.layer_warning.push(
                  _this.sprintf(quantityMsg, quantity + '-' + maxQuantity, nextMinQuantity + '-' + nextMaxQuantity)
                );
                quantityWarningFlag = true;
                maxQuantityWarningFlag = true;
              }
            }
            _this.setLayerWaringInfo(i, 'min_quantity_warning', quantityWarningFlag);
            _this.setLayerWaringInfo(i, 'max_quantity_warning', maxQuantityWarningFlag);
            _this.setLayerWaringInfo(i, 'price_warning', priceWarningFlag);
            _this.setLayerWaringInfo(i, 'is_valid', (!quantityWarningFlag && !priceWarningFlag && !maxQuantityWarningFlag));
          }
        },
        // 辅助函数
        clearMsg: function () {
          this.success_msg = [];
          this.fail_msg = [];
        },
        clearInputQuoteError: function () {
          this.input_quote_error = [];
          this.input_quote_error_product_ids = [];
        },
        sprintf: function () {
          var args = arguments,
            string = args[0],
            i = 1;
          return string.replace(/%((%)|s|d)/g, function (m) {
            var val = null;
            if (m[2]) {
              val = m[2];
            } else {
              val = args[i];
              switch (m) {
                case '%d':
                  val = parseFloat(val);
                  if (isNaN(val)) {
                    val = 0;
                  }
                  break;
              }
              i++;
            }
            return val;
          });
        },
        setLayerWaringInfo: function (row, attribute, value) {
          let _this = this;
          value = !!value;
          _this.layer_warning_info[row][attribute] = value;
        },
        checkInputQuoteError: function (product) {
          if (!product) {
            return false;
          }
          let productId = product['product_id'];
          let inputQuoteIds = this.input_quote_error_product_ids;
          for (let i = 0; i < inputQuoteIds.length; i++) {
            if (productId == inputQuoteIds[i]) {
              return true;
            }
          }

          return false;
        }
      },
      watch: {
        quote: function (newVal, oldVal) {
          this.clickQuote();
        },
        layer_setting: {
          deep: true,
          handler: function (newVal, oldVal) {
            if (this.hasClickSaveSetting) {
              this.layer_warning_switch = false;
              this.layer_sp_warning_switch = false;
            }
            this.checkLayerSetting(newVal, oldVal);
          }
        },
        min_quantity: function (newVal, oldVal) {
          if (parseInt(newVal) <= 0) {
            this.min_quantity = 0;
          }
          if (parseInt(newVal) != newVal) {
            this.min_quantity = parseInt(newVal);
          }
        }
      }
    });

  </script>
</div>