{% trans_default_category 'account/sidebar/price_calculator' %}
{% include 'yzcTheme/template/account/customerpartner/sidebar/price_calculator/components/cost_form.twig' %}
{{ this.params('pageTitle', {
  show: true,
  title: __('定价计算器'),
  backUrl: '',
}) }}


{{ css(['/css/admin/price_calculator/index.css']) }}
{{ cssOrigin([
  '/catalog/view/javascript/product/element-ui.css',
  '/catalog/view/theme/yzcTheme/stylesheet/app.css',
]) }}
{{ jsOrigin([
  '/catalog/view/javascript/product/element-ui.js',
  '/catalog/view/javascript/product/axios.min.js',
  '/catalog/view/javascript/layerOris.js'
], 2) }}
{{ js(['/js/common/mathematical.js']) }}
<div id="price_calculator" class="price_calculator">
  <div class="nav-oris">
    <!-- tab切换 start -->
    <ul class="nav nav-tabs">
      <li class="active" data-type="new">
        <a href="#tab-new" data-toggle="tab" @click="changeTab('new')">{{ __('新产品') }}</a>
      </li>
      <li id="futures_li" data-type="old">
        <a href="#tab-old" data-toggle="tab" @click="changeTab('old')">{{ __('现有产品') }}</a>
      </li>
    </ul>
    <!-- tab切换 end -->
    <div class="tab-content">
      <!-- 新产品Start -->
      <div class="new-product" v-show="activeName=='new'">
        <el-form ref="form" :model="form" :rules="rules" label-width="auto">
          <div class="product-info">
            <div class="header-title mb-24">{{ __('产品信息') }}</div>
            <el-row>
              <el-form-item v-if="countryId==223" label="{{ __('单位') }}" class="mb-12">
                <ul class="unit-tab">
                  <li :class="isShowUnit?'unit-tab-left-active':'no-border-right'"
                      @click="changeUnit(true,'{{ __('英寸') }}')">{{ __('英寸') }}</li>
                  <li :class="!isShowUnit?'unit-tab-right-active':'no-border-left'"
                      @click="changeUnit(false,'{{ __('厘米') }}')">{{ __('厘米') }}</li>
                </ul>
              </el-form-item>
            </el-row>
            <el-row>
              <el-col :span="12">
                <el-form-item label="{{ __('长度') }}" prop="inputLength">
                  <el-input v-model="form.inputLength" :placeholder="placeHolder1" :oninput="validNumber1" v-on:input="onInputForm"
                            :disabled="countryId==223?false:true">
                    <template slot="append">${ unit }</template>
                  </el-input>
                </el-form-item>
              </el-col>
              <el-col :span="12">
                <el-form-item label="{{ __('整柜海运费') }}" prop="seaFreight">
                  <el-input v-model="form.seaFreight" :placeholder="placeHolder2" @blur="formula1('seaFreight')"
                            :oninput="countryId!=107?validNumber2:validNumber3">
                    <template slot="append">${ currency }</template>
                  </el-input>
                </el-form-item>
              </el-col>
            </el-row>
            <el-row>
              <el-col :span="12">
                <el-form-item label="{{ __('宽度') }}" prop="inputWidth">
                  <el-input v-model="form.inputWidth" :placeholder="placeHolder1" :oninput="validNumber1" v-on:input="onInputForm"
                            :disabled="countryId==223?false:true">
                    <template slot="append">${ unit }</template>
                  </el-input>
                </el-form-item>
              </el-col>
              <el-col :span="12">
                <el-form-item label="{{ __('整柜目的港费') }}" prop="destinationFee">
                  <el-input v-model="form.destinationFee" :placeholder="placeHolder2" @blur="formula1('destinationFee')"
                            :oninput="countryId!=107?validNumber2:validNumber3">
                    <template slot="append">${ currency }</template>
                  </el-input>
                </el-form-item>
              </el-col>
            </el-row>
            <el-row>
              <el-col :span="12">
                <el-form-item label="{{ __('高度') }}" prop="inputHeight">
                  <el-input v-model="form.inputHeight" :placeholder="placeHolder1" :oninput="validNumber1" v-on:input="onInputForm"
                            :disabled="countryId==223?false:true">
                    <template slot="append">${ unit }</template>
                  </el-input>
                </el-form-item>
              </el-col>
              <el-col :span="12">
                <el-form-item label="{{ __('整柜关税') }}" prop="dutyFee">
                  <el-input v-model="form.dutyFee" :placeholder="placeHolder2" @blur="formula1('dutyFee')"
                            :oninput="countryId!=107?validNumber2:validNumber3">
                    <template slot="append">${ currency }</template>
                  </el-input>
                </el-form-item>
              </el-col>
            </el-row>
            <el-row>
              <el-col :span="12">
                <el-form-item label="{{ __('重量') }}" prop="inputWeight">
                  <el-input v-model="form.inputWeight" :placeholder="placeHolder1" :oninput="validNumber1" v-on:input="onInputForm"
                            :disabled="countryId==223?false:true">
                    <template slot="append">{{ __('磅') }}</template>
                  </el-input>
                </el-form-item>
              </el-col>
              <el-col :span="12">
                <el-form-item label="{{ __('整柜卸货费') }}" prop="unloadFee">
                  <el-input v-model="form.unloadFee" :placeholder="placeHolder2" @blur="formula1('unloadFee')"
                            :oninput="countryId!=107?validNumber2:validNumber3">
                    <template slot="append">${ currency }</template>
                  </el-input>
                </el-form-item>
              </el-col>
            </el-row>
            <el-row>
              <el-col :span="12">
                <el-form-item label="{{ __('装柜量') }}" prop="loadQty">
                  <el-input v-model="form.loadQty" placeholder="1~9999" :oninput="validNumber4" @blur="changeLoadQty">
                    <template slot="append">{{ __('件') }}</template>
                  </el-input>
                </el-form-item>
              </el-col>
            </el-row>
          </div>
          <div class="cost-expense">
            <cost-form ref="new" :isdisabled="true" :currency="currency" :symbolLeft="symbolleft" :countryid="countryId"
                       :symbolRight="symbolright"></cost-form>
          </div>
        </el-form>
      </div>
      <!-- 新产品End -->
      <!-- 现有产品Start -->
      <div class="old-product" v-show="activeName=='old'">
        <el-form ref="oldForm" :model="oldForm" :rules="rules" label-width="auto">
          <div class="product-info">
            <div class="header-title mb-32">{{ __('产品信息') }}</div>
            <el-row>
              <el-col :span="12">
                <el-form-item label="Item Code/MPN" prop="itemCode">
                  <el-input v-model="oldForm.itemCode" placeholder="{{ __('请输入Item Code/MPN') }}"
                            @change="changeMpn" @clear="clearTip" :disabled="countryId!=223">
                  </el-input>
                </el-form-item>
              </el-col>
              <el-col :span="12">
                <el-form-item label="{{ __('入库单号') }}" class="disabled-el-input">
                  <el-input v-if="isFlag"  placeholder="{{ __('请输入入库单号') }}" disabled></el-input>
                  <el-select v-else v-model="oldForm.docNo" multiple  collapse-tags clearable filterable remote
                             no-data-text="{{ __('入库单号不存在') }}" multiple-limit="5"
                             @change="getOceanFreight" :remote-method="getReceiptOrderList" placeholder="{{ __('请输入入库单号') }}">
                    <el-option
                            v-for="item in options"
                            :key="item.receive_order_id"
                            :label="item.receive_number"
                            :value="item.receive_number">
                    </el-option>
                  </el-select>
                  <div class="cost-tip-position">
                    <span class="cost-tip" data-toggle="tooltip"
                          data-original-title="{{ __('入库单号基于已输入ItemCode关联查询，仅支持在库库存大于0的入库单号，且不支持不在同一批次的combo品的查询') }}">
                    <i class="giga icon-V10-wenhaotishi"></i>
                  </span>
                  </div>
                </el-form-item>
              </el-col>
            </el-row>
          </div>
          <cost-form ref="old" :isdisabled="false" :currency="currency" :symbolleft="symbolleft" :countryid="countryId"
                     :symbolright="symbolright">
          </cost-form>
        </el-form>
      </div>
      <!-- 现有产品End -->
      <!-- Tip提示Start -->
      <div class="dividing-line" v-if="countryId==223">
        <div class="p-gray mb-12">Tips：</div>
        <div class="p-gray">{{ __(' 1. 新产品输入长、宽、高、重量以及装柜量和整柜入库相关费用预估，单个产品入库相关成本将自动计算并填充') }}</div>
        <div class="p-gray">{{ __(' 2. 现有产品输入 Item Code 及入库单号，入库相关成本将自动计算并填充') }}</div>
        <div class="p-gray">{{ __(' 3. 运费、打包费和仓租费参照物流计算器的相关公式计算得出') }}</div>
        <div class="p-gray">{{ __(' 4. 一件代发建议价及利润试算结果仅供参考，最终定价请综合市场波动及企业经营目标等综合因素考量') }}</div>
      </div>
      <div class="dividing-line" v-if="countryId!=223">
        <div class="p-gray mb-12">Tips：</div>
        <div class="p-gray">{{ __('1. 新产品输入装柜量和整柜入库相关费用预估，单个产品入库相关成本将自动计算并填充') }}</div>
        <div class="p-gray">{{ __('2. 一件代发建议价及利润试算结果仅供参考，最终定价请综合市场波动及企业经营目标等综合因素考量') }}</div>
      </div>
      <!-- Tip提示End -->
      <!-- 底部吸底 -->
      <div class="fixed-footer" id="calc-footer">
        <span class="header-title">{{ __('利润') }}</span>
        <span class="calc-item-label ml-32">{{ __('净利润') }}: </span>
        <span class="amount-label-orange font-18">${ symbolleft + netProfit + symbolright }</span>
        <span class="calc-item-label ml-120">{{ __('利润率') }}: </span>
        <span v-if="profitMargin==''" class="color-9">N/A</span>
        <span v-else class="color-9" :style="{ color: profitMargin>0?'#0AAD4F':'#E64545' }">${ profitMargin }%</span>
        <div class="btn-box">
          <button class="oris-button-bigger oris-button btn-filter mar-r-10" @click.stop="calcProfit" :disabled="disabledBtn">{{ __('估算') }}</button>
          <button class="oris-button-default oris-button-bigger oris-button reset" @click.stop="reset" :disabled="disabledBtn">{{ __('重置') }}</button>
        </div>
      </div>
    </div>
  </div>

</div>
<script>
  const API = {
    // 获取仓租费
    GET_FEE: '{{ url('account/customerpartner/sidebar/price_calculator/getFee') }}',
    // 检验mpn
    CHECK_SKU:'{{ url('account/customerpartner/sidebar/price_calculator/checkSku') }}',
    // 获取运单列表
    GET_RECEIPT_ORDER_LIST:'{{ url('account/customerpartner/sidebar/price_calculator/getReceiptOrderList') }}',
    // 根据运单号id数组获取海运费
    GET_OCEAN_FREIGHT: '{{ url('account/customerpartner/sidebar/price_calculator/getOceanFreight') }}',
    // 获取平台比例费
    GET_PLATFORM_FEE_RATIO: '{{ url('account/customerpartner/sidebar/price_calculator/getPlatformFeeRatio') }}'
  };
  new Vue({
    el: '#price_calculator',
    delimiters: [
      '${', '}'
    ],
    data() {
      const validateItemCode = (rule, value, callback) => {
        let _that = this;
        value = value.trim();
        if (value != '') {
          _that.checkSku(msg =>{
            if(msg){
              _that.isFlag = true;
              callback(new Error(msg));
            }else{
              if(_that.oldForm.itemCode.trim().length>0){
                _that.isFlag = false;
                callback();
              }
            }
          });

        } else {
          _that.isFlag = true;
          _that.disabledBtn = false;
          callback();
        }
      };
      // 非0校验
      const validateNum1 = (rule,value,callback) => {
        let msg = '{{ __('请输入一个大于0的数字') }}';
        if(value!=''&&value==0){
          callback(msg);
        }else{
          callback();
        }
      };
      // 非0校验
      const validateNum = (rule,value,callback) => {
        let that = this;
        let msg = '';
        if(that.countryId!=107){
          msg = '{{ __('请输入一个大于0的数字') }}';
        }else{
          msg = '{{ __('请输入一个大于0的整数') }}';
        }
        if(value){
          if(parseFloat(value)==0||that.countryId==107&&parseFloat(value)<1){
            callback(msg);
          }else{
            callback();
          }
        }else{
          callback();
        }
      };
      // 装柜量
      const validataQty = (rule,value,callback) => {
        let msg = '{{ __('请输入一个大于0的整数') }}';
        if(parseFloat(value)==0){
          callback(msg);
        }else{
          callback();
        }
      };
      return {
        activeName: 'new',
        // 国别
        countryId: {{ countryId }},
        // 货币符号
        symbolleft: '{{ symbolLeft }}',
        symbolright: '{{ symbolRight }}',
        // 产品id
        productId: '',
        form: {},
        rules: {
          inputWidth: [
            {validator:validateNum1, trigger: 'blur'},
          ],
          inputHeight: [
            {validator:validateNum1, trigger: 'blur'},
          ],
          inputLength: [
            {validator:validateNum1, trigger: 'blur'},
          ],
          inputWeight: [
            {validator:validateNum1, trigger: 'blur'},
          ],
          loadQty: [
            {required: true, message: '{{ __('请输入装柜量') }}', trigger: 'blur'},
            {validator:validataQty, trigger: 'blur'},
          ],
          seaFreight: [
            {validator:validateNum, trigger: 'blur'},
          ],
          destinationFee: [
            {validator:validateNum, trigger: 'blur'},
          ],
          dutyFee:[
            {validator:validateNum, trigger: 'blur'},
          ],
          unloadFee:[
            {validator:validateNum, trigger: 'blur'},
          ],
          itemCode: [
            { validator:validateItemCode,trigger: 'blur'  }
          ]
        },
        options: [],
        unit: '{{ __('英寸') }}',
        placeHolder1: '0.01~999.99',
        placeHolder2: '{{ countryId }}'==107?'1-9999999':'0.01~99999.99',
        // 国别编写
        currency: '{{ __(currency) }}',
        // 单位切换显示, true英寸 false 厘米
        isShowUnit: true,
        // 现有产品表单
        oldForm: {  },

        // 净利润
        netProfit: '{{ countryId }}'==107?0:'0.00',
        // 利润率
        profitMargin: '',

        // 0.01-999.99
        validNumber1: 'this.value= this.value.match(/(([1-9][0-9]{0,2}|\\d)(\\.\\d{0,2})?)?/)?this.value.match(/(([1-9][0-9]{0,2}|\\d)(\\.\\d{0,2})?)?/)[0]:\'\'',
        // 0.01-99999.99
        validNumber2: 'this.value= this.value.match(/(([1-9][0-9]{0,4}|\\d)(\\.\\d{0,2})?)?/)?this.value.match(/(([1-9][0-9]{0,4}|\\d)(\\.\\d{0,2})?)?/)[0]:\'\'',
        // 1-9999999
        validNumber3: 'this.value= this.value.match(/([1-9]\\d{0,6}|0)?/) ? this.value.match(/([1-9]\\d{0,6}|0)?/)[0] : \'\'',
        // 1-9999
        validNumber4: 'this.value= this.value.match(/([1-9]\\d{0,3}|0)?/) ? this.value.match(/([1-9]\\d{0,3}|0)?/)[0] : \'\'',

        // 草稿
        draft:{
          newNetProfit: '{{ countryId }}'==107?0:'0.00',
          newProfitMargin: '',
          oldNetProfit: '{{ countryId }}'==107?0:'0.00',
          oldProfitMargin: ''
        },
        // 判断itemCode是否符合
        isFlag: true,
        itemCodeStr: '',
        count: 0,
        // 禁用按钮
        disabledBtn: false,
        fun: null,
        source: null,
        skuSource: null
      }
    },
    mounted: function () {
      this.axios = axios.create({});
      window.addEventListener('keyup',this.handleKeyup);
      window.addEventListener('click',this.handleKeyup);
    },
    methods: {
      // 初始化数据
      initData(){
        this.form = {
          inputLength: '', // 长度
          inputWidth: '', // 宽度
          inputHeight: '', // 高度
          inputWeight: '', // 重量
          loadQty: '', // 装柜量
          seaFreight: '', // 整柜海运费
          destinationFee: '{{ countryId }}'==223?'760.00':'', // 目的港费
          dutyFee: '', // 关税
          unloadFee: '{{ countryId }}'==223?'455.00':'', // 卸货费
        };
        this.oldForm = {
          itemCode: '',
          docNo: []
        };
        this.netProfit = '{{ countryId }}'==107?0:'0.00';
        this.profitMargin = '';
      },
      // 切换产品tab
      changeTab(tab) {
        this.activeName = tab;
        if(tab=='old'&&this.count==0){
          this.count = 1;
          if(this.countryId==223){
            this.$refs['old'].computedAllCostFee();
          }
        }
        this.netProfit = this.draft[this.activeName+'NetProfit'];
        this.profitMargin = this.draft[this.activeName+'ProfitMargin'];
      },
      // 切换单位
      changeUnit(type, unit) {
        this.isShowUnit = type;
        this.unit = unit;
        this.getFee();
        this.$refs[this.activeName].computedTotal();
        this.$refs[this.activeName].computedIncome();
        this.$refs[this.activeName].computedAllCostFee();
        this.$refs[this.activeName].computedRMA();
      },
      // 厘米转换英寸
      convertLength(param) {
        let arg1 = mathematical.accMul(param,0.3937);
        return mathematical.MathToPrice(arg1,2);
      },
      // 汇率相互转换
      getChangeRate() {
        let obj = {
          inputWidth: 0,
          inputHeight: 0,
          inputLength: 0,
          inputWeight: this.form.inputWeight,
        };
        if(!this.isShowUnit){
          for(var key in obj){
            if(key!='inputWeight'){
              let value = this.convertLength(this.form[key]);
              obj[key] = value;
            }
          }
        }else{
          obj.inputWidth = this.form.inputWidth;
          obj.inputHeight = this.form.inputHeight;
          obj.inputLength = this.form.inputLength;
          obj.inputWeight = this.form.inputWeight;
        }
        return obj;
      },
      // 根据国别判断当前值
      getNum(){
        return this.countryId !=107?'0.00':0;
      },
      // mpn的change事件
      // 第一种：itemCode存在，入库单号有选择值，修改itemCode时，海运费重置；
      // 第二种：itemCode存在，入库单未勾选，海运费手动输入，修改itemCode，海运费不变；
      // 第三种：itemCode不存在，海运费手动输入了，修改itemCode（显示itemCode存在），然后海运费不变;
      // 第四种：itemCode存在，入库单号有选择值，清空itemCode时，海运费重置;
      changeMpn(val){
        if(val.length==0&&this.countryId==223&&this.oldForm.docNo.length!=0){
          this.$set(this.oldForm,'docNo',[]);
          this.options = [];
          this.$refs[this.activeName].form.seaFreight = this.countryId!=107?'0.00':0;
          this.$refs[this.activeName].computedAllCostFee();
        }
      },
      // 清空校验事件
      clearTip(){
        let that = this;
        if(this.countryId==223){
          that.$refs['old'].form.warehouseRent = '0.00';
          that.$refs['old'].form.soldDay = 45;
          that.$refs['old'].form.B2BLogisticsFee = '0.00';
          that.$refs['old'].form.freight = '0.00';
          that.$refs['old'].form.packFee = '0.00';
          that.$refs['old'].form.B2BLogisticsFee2 = '0.00';
          that.$refs['old'].form.freight2 = '0.00';
          that.$refs['old'].form.packFee2 = '0.00';
        }
        that.$nextTick(() =>{
          that.$refs['oldForm'].clearValidate();
          that.isFlag = true;
        })
      },

      /***************计算公式*****************/
      // 装柜量
      changeLoadQty(e){
        this.formula1('seaFreight');
        this.formula1('destinationFee');
        this.formula1('dutyFee');
        this.formula1('unloadFee');
      },
      // 海运费、目的港费、关税、卸货费公式计算：例：海运费= 整柜海运费/ 装柜量
      formula1(key){
        if(this.form[key]!=''){
          this.form[key] = mathematical.formatDecimal(this.form[key],this.countryId == 107 ? 0: 2);
        }
        if (this.form[key]&&this.form.loadQty&&parseFloat(this.form[key])>0&&parseFloat(this.form.loadQty)>0) {
          let divisor = parseFloat(this.form[key]);
          let loadQty = parseFloat(this.form.loadQty);
          let lastValue = 0;
          if(loadQty>0&&divisor>0){
            lastValue =  divisor / loadQty;
          }
          let result = this.countryId == 107 ? mathematical.MathToFixed(lastValue,0): mathematical.MathToFixed(lastValue,2);
          this.$refs['new'].form[key] = this.countryId == 107 ? mathematical.formatDecimal(result,0):mathematical.formatDecimal(result,2);
          this.$refs['new'].computedAllCostFee();
        }else{
          this.$refs['new'].form[key] = this.countryId == 107 ? 0: '0.00';
          this.$refs['new'].computedAllCostFee();
        }
        this.$refs['new'].computedRMA();

      },

      // 估算，获取子组件的计算方法
      calcProfit(){
        let object = { };
        if(this.activeName == 'old'){
          if(this.oldForm.itemCode==''){
            object = this.$refs['old'].getResult();
          }
          else {
            if(this.oldForm.itemCode&&!this.isFlag) {
              object = this.$refs['old'].getResult();
            }
          }
        }else{
          if((!this.form.inputWeight||!this.form.inputLength||!this.form.inputHeight||!this.form.inputWidth)&&parseFloat(this.form.loadQty)>0){
            this.$refs['form'].validate((valid) =>{
              if(valid){
                object = this.$refs['new'].getResult();
              }
            })
          }
          else {
            this.$refs['form'].validate((valid) => {
              if(parseFloat(this.form.loadQty)>0&&parseFloat(this.form.inputWeight)&&parseFloat(this.form.inputLength)>0&&
                parseFloat(this.form.inputHeight)>0&&parseFloat(this.form.inputWidth)>0&&valid){
                object = this.$refs['new'].getResult();
              }else{
                return false;
              }
            })
          }
        }
        if(JSON.stringify(object) != '{}'){
          this.netProfit = object.incomeProfit;
          this.profitMargin =object.profitMargin;
          this.draft[this.activeName+'NetProfit']=this.netProfit;
          this.draft[this.activeName+'ProfitMargin']=this.profitMargin;
        }
      },
      // 重置
      reset(){
        this.initData();
        // 重置组件表单
        this.$refs['old'].initData();
        this.$refs['new'].initData();
        this.isShowUnit = this.countryId == 223 ? true : false;
        this.$refs['form'].clearValidate();
        this.$nextTick(() => {
          this.getPlatformFeeRatio();
        });
        this.count = 0;
        if(this.countryId==223){
          this.$refs['old'].computedAllCostFee();
        }
      },
      // 重置运费打包费
      reSetFee(){
        this.$set(this.form,'inputLength','');
        this.$set(this.form,'inputWidth','');
        this.$set(this.form,'inputHeight','');
        this.$set(this.form,'inputWeight','');
        this.$refs[this.activeName].form.freight = this.getNum();
        this.$refs[this.activeName].form.packFee = this.getNum();
        this.$refs[this.activeName].form.freight2 = this.getNum();
        this.$refs[this.activeName].form.packFee2 = this.getNum();
        if(this.countryId==223) {
          this.$refs[this.activeName].form.warehouseRent = this.getNum();
        }
        this.$refs[this.activeName].form.B2BLogisticsFee = this.getNum();
        this.$refs[this.activeName].computedAllCostFee();
        this.$refs[this.activeName].form.B2BLogisticsFee2 = this.$refs[this.activeName].form.B2BLogisticsFee;
        this.$refs[this.activeName].computedIncome();
        this.$refs['new'].computedRMA();
        this.$refs.form.clearValidate();
        this.disabledBtn = false;
      },
      /********************接口*******************/
      // 获取仓租费
      // itemCode修改或清空，仓租和物流费要变化（限美国），不存在，不用重置
      getFee(){
        if(this.countryId==223){
          let url = API.GET_FEE;
          let data = this.getChangeRate();
          if(parseFloat(data.inputWeight)>0&&parseFloat(data.inputHeight)>0&&parseFloat(data.inputWidth)>0&&parseFloat(data.inputLength)>0&&this.activeName=='new'||this.activeName=='old'){
            let params = {
              day: this.$refs[this.activeName].form.soldDay,
              customerId: '{{ customerId }}'
            };
            if(this.activeName=='new'){
              params = {
                ...params,
                length: data.inputLength,
                width: data.inputWidth,
                height: data.inputHeight,
                weight: data.inputWeight
              };
            }else{
              params = { ...params ,productId: this.productId};
            }
            this.cancelSource();
            // 取消上一次请求
            this.source = axios.CancelToken.source();

            this.axios.post(url,params,{cancelToken:this.source.token}).then(data => {
              let res = data.data;
              if(res.code == 200){
                let freghit = res.data.ltlFlag ? res.data.dropShip.ltlFreight: res.data.dropShip.expressFreight || (this.countryId==107?0:'0.00');
                freghit = mathematical.accAdd(freghit,res.data.dangerFee||0);
                freghit = mathematical.formatDecimal(freghit,this.countryId==107?0:2);
                this.$refs[this.activeName].form.freight = freghit;
                this.$refs[this.activeName].form.packFee = res.data.dropShip.packageFee||(this.countryId==107?0:'0.00');
                if(this.countryId==223) {
                  this.$refs[this.activeName].form.warehouseRent = mathematical.MathToFixed(res.data.wareHouseRental.feeTotal, this.countryId == 107 ? 0 : 2);
                }
                this.$refs[this.activeName].form.B2BLogisticsFee = mathematical.accAdd(res.data.dropShip.packageFee||0,freghit);
                this.$refs[this.activeName].form.freight2 = freghit
                this.$refs[this.activeName].form.packFee2 = res.data.dropShip.packageFee||(this.countryId==107?0:'0.00');
                this.$refs[this.activeName].computedAllCostFee();
                this.$refs[this.activeName].form.B2BLogisticsFee2 = this.$refs[this.activeName].form.B2BLogisticsFee;
                this.$refs[this.activeName].computedIncome();
                this.disabledBtn = false;
                this.$refs['new'].computedRMA();
              }else{
                let that = this;
                if(this.activeName=='new'){
                  that.debounce(function () {
                    that.alertError(res);
                  }, 500, that);
                }else{
                  that.reSetFee();
                }
              }
            })
          }else{
            this.$refs[this.activeName].form.freight = this.getNum();
            this.$refs[this.activeName].form.packFee = this.getNum();
            if(this.countryId==223){
              this.$refs[this.activeName].form.warehouseRent = this.getNum();
            }
            this.$refs[this.activeName].form.freight2 = this.getNum();
            this.$refs[this.activeName].form.packFee2 = this.getNum();
            this.$refs[this.activeName].form.B2BLogisticsFee = this.getNum();
            this.$refs[this.activeName].form.B2BLogisticsFee2 = this.getNum();
            this.$refs['new'].computedRMA();
          }
          this.$refs[this.activeName].computedAllCostFee();
          this.$refs[this.activeName].computedIncome();
        }
      },
      cancelSource(){
        if(this.source){
          this.source.cancel('Operation canceled by the user.');
        }
      },
      //防抖
      debounce(fn, wait, that) {
        if (that.fun !== null) {
          clearTimeout(that.fun);
        }
        that.fun = setTimeout(fn, wait);
      },
      //弹窗提示
      alertError(res) {
        let that = this;
        let options = {
          title: '{{ __('提示信息') }}',
          content: res.msg?res.msg:'{{ __('系统异常，请稍后重试') }}',
          btn: ['{{ __('我知道了') }}'],
          btnAlign: 'c',
          skin: 'oris-layer',
        };
        that.layerIndex = layerOris.confirmLayer(options,function () {
          that.reSetFee();
          layer.closeAll();
        }, function () {
          that.reSetFee();
          layer.closeAll();
        });
      },
      // 校验sku
      checkSku(callback){
        if(this.oldForm.itemCode.trim()!=this.itemCodeStr&&this.countryId==223&&this.oldForm.docNo.length!=0){
          this.options = [];
          this.$set(this.oldForm,'docNo',[]);
          this.$refs[this.activeName].form.seaFreight = this.countryId!=107?'0.00':0;
        }
        let that = this;
        let url = API.CHECK_SKU;
        let params = new FormData();
        params.append('sku',this.oldForm.itemCode.trim());
        params.append('customerId','{{ customerId }}');
        this.axios.post(url,params).then(data => {
          let res = data.data;
          this.isFlag = true;

          if(res.code == 200&&this.oldForm.itemCode.trim().length>0){
            that.productId = res.data.productId;
            that.itemCodeStr = this.oldForm.itemCode.trim();
            that.getFee();
            setTimeout(function () {
              this.disabledBtn = false;
              callback();
            },1000);
          }else {
            if(this.oldForm.itemCode.trim().length>0){
              this.disabledBtn = true;
              callback('{{ __('ItemCode 不存在') }}');
            }else{
              this.disabledBtn = false;
              callback();
            }
          }
        }).catch(()=>{
          callback('{{ __('ItemCode 不存在') }}');
        })
      },
      // 获取运单列表
      getReceiptOrderList(query){
        let url = API.GET_RECEIPT_ORDER_LIST;
        let params = {
          productId: this.productId,
          customerId: '{{ customerId }}',
          keyword: query.trim()
        };
        this.axios.post(url,params).then(data => {
          let res = data.data;
          if(res.code == 200){
            this.options = res.data;
          }
        }).catch(() => {
        });
      },
      // 根据运单号id数组获取海运费
      getOceanFreight(val){
        if(this.countryId==223){
          if(val.length>0){
            let url = API.GET_OCEAN_FREIGHT;
            let data = new FormData();
            data.append('productId',this.productId);
            for(var i=0;i<val.length;i++){
              data.append('receiveOrderIds['+i+']',val[i]);
            }
            this.axios.post(url,data).then(data => {
              let res = data.data;
              if(res.code == 200){
                if(this.oldForm.docNo.length>0){
                  this.$refs[this.activeName].form.seaFreight = mathematical.MathToFixed(res.data.oceanFreight,2)||(this.countryId!=107?'0.00':0);
                }

              }else{
                this.$refs[this.activeName].form.seaFreight = this.countryId!=107?'0.00':0;
              }
              this.$refs[this.activeName].computedAllCostFee();
            }).catch(() => {

            });
          }else{
            this.$set(this.oldForm,'docNo',[]);
            this.options = [];
            this.$refs[this.activeName].form.seaFreight = '0.00';
          }
        }

      },
      // 获取平台比例费
      getPlatformFeeRatio(){
        let url = API.GET_PLATFORM_FEE_RATIO;
        let params = new FormData();
        params.append('customerId','{{ customerId }}');
        this.axios.post(url,params).then(data => {
          let res = data.data;
          if(res.code == 200){
            let result = mathematical.accMul(res.data.ratio,100);
            this.$refs['new'].form.platformFeeProportion = result;
            this.$refs['old'].form.platformFeeProportion = result;
          }else{
            this.$refs['new'].form.platformFeeProportion = '0.0';
            this.$refs['old'].form.platformFeeProportion = '0.0';
          }
        })
      },
      // 键盘事件,此步骤为解决测试的极端操作
      handleKeyup(event){
        let that = this;
        if(that.countryId==223&&that.oldForm.docNo.length==0){
          setTimeout(function () {
            that.$refs['old'].form.seaFreight = '0.00';
          },500);
        }
        if(that.oldForm.itemCode.trim().length==0){
          that.options = [];
          that.isFlag = true;
          this.$set(this.oldForm,'docNo',[]);
        }
      },
      // 监听输入
      onInputForm(){
        let that = this;
        that.debounce(function () {
          that.getFee();
        },500,that);
        if(this.form.inputWeight&&this.form.inputWidth&&this.form.inputHeight&&this.form.inputLength){
          this.disabledBtn = true;
        }else{
          this.disabledBtn = false;
        }
      }
    },
    created() {
      this.initData();
      this.isShowUnit = this.countryId == 223 ? true : false;
      this.unit = this.countryId == 223 ? '{{ __('英寸') }}' : '{{ __('厘米') }}';
      this.$nextTick(() =>{
        this.getPlatformFeeRatio();
      })
    },
    computed: {
      pokerHistory() {
        return this.oldForm.itemCode
      }
    },
    watch: {
      pokerHistory(newValue, oldValue) {
        if(!newValue){
          this.clearTip();
        }
        if(newValue){
          this.disabledBtn = true;
        }else{
          this.disabledBtn = false;
        }
      }
    },
    beforeDestroy() {
      // 组件销毁阶段调用cancelToken方法取消请求
      this.source && this.source.cancel('Operation canceled by the user.');
    }
  })
</script>